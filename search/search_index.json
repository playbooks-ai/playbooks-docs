{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-playbooks-ai","title":"What is Playbooks AI?","text":"<p>Playbooks AI is a novel framework for building AI agents using Natural Language Programming. </p> <ul> <li>A new \"english-like\", semantically interpreted programming language</li> <li>Runtime for reliable, auditable and verifiable execution</li> <li>Seamless composition of complex workflows across natural language and Python</li> </ul> <p>     Get started:      <code>pip install playbooks</code> </p> <p> Quickstart Tutorials Playbooks Language </p>"},{"location":"#learn-more","title":"Learn more","text":"<ul> <li> <p> Natural Language Programming</p> <p>Create AI agents using natural language, with Markdown playbooks for step-by-step instructions, suitable for prescribed business processes. Mix prescribed workflows with dynamic planning.</p> <p>Learn about Playbooks Language</p> </li> <li> <p> Python Integration</p> <p>Turn any async Python function into a playbook with the <code>@playbook</code> decorator. Call other playbooks (including natural language playbooks) from Python and vice versa.</p> <p>Explore Python Playbooks</p> </li> <li> <p> Multi-Agent Architecture</p> <p>Natively support multi-agent systems with agent-to-agent calls and messaging. Enable natural language  message passing and multi-turn dialogue between agents with direct playbook invocation.</p> <p>Discover Multi-Agent Systems</p> </li> <li> <p> Event-Driven Programming</p> <p>Use triggers for declarative event-driven programming. Playbooks are dynamically invoked when specified  conditions are met, including temporal, state-based, execution flow, user interaction, and external events.</p> <p>Explore Triggers</p> </li> <li> <p> Execution Observability</p> <p>Playbooks framework tracks call stack and variables. Step-by-step execution is verified using static  analysis of the program, with fully inspectable LLM program execution.</p> <p>Learn about Observability</p> </li> <li> <p> Artifacts and State Management</p> <p>Store and retrieve data with artifacts. Manage state across playbook executions and between agents.</p> <p>Manage Artifacts</p> </li> </ul>"},{"location":"agents/","title":"Agents","text":"<ul> <li>See Multi-Agent Programming</li> <li>Refer to tutorials for other topics</li> </ul>"},{"location":"api-reference/","title":"API Reference","text":"<p>TODO: Add API reference.</p>"},{"location":"artifacts/","title":"Artifacts","text":"<ul> <li>See Working with Artifacts tutorial</li> <li>Refer to tutorials for other topics</li> </ul>"},{"location":"get-started/","title":"Getting Started with Playbooks AI","text":"<p>Playbooks AI is a framework for building AI agents using natural language programming. It allows you to create AI agents that can understand and execute natural language instructions, interact with users, and call Python functions seamlessly.</p>"},{"location":"get-started/#what-are-playbooks","title":"What are Playbooks?","text":"<p>Playbooks are procedures that define the behavior of AI agents. They can be written as:</p> <ol> <li>Natural language instructions - Step-by-step instructions for prescribed business processes</li> <li>Agentic prompts - Prompt-based playbooks for dynamically planned tasks where the AI agent decides the next steps</li> <li>Python functions - Python functions that can be called from playbooks and can call playbooks</li> </ol>"},{"location":"get-started/#installation","title":"Installation","text":"<p>To get started with Playbooks AI, you need to install the <code>playbooks</code> package:</p> <pre><code>pip install playbooks\n</code></pre>"},{"location":"get-started/#first-steps","title":"First Steps","text":"<p>Follow these guides to start building with Playbooks AI:</p> <ul> <li>Installation: Detailed installation instructions</li> <li>Quickstart: Create your first playbook in minutes</li> <li>Tutorials: Tutorials to learn from</li> </ul>"},{"location":"get-started/#core-concepts","title":"Core Concepts","text":"<p>Playbooks AI is built around these core concepts:</p> <ul> <li>Playbooks Language: The natural language programming syntax</li> <li>Agent Framework: The environment that Playbooks programs run in</li> <li>Playbooks Runtime: Manages interpreter, control flow, variables, artifacts, etc.</li> <li>Triggers: Event-driven programming through natural language conditions</li> <li>Artifacts: Store and access data from playbooks</li> </ul> <p>Ready to dive in? Check out the Quickstart Guide to create your first playbook. </p>"},{"location":"get-started/installation/","title":"Installation","text":"<p>This guide will walk you through the process of installing Playbooks AI and setting up your development environment.</p>"},{"location":"get-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing Playbooks AI, ensure you have:</p> <ul> <li>Python 3.10 or higher</li> <li>pip (Python package installer)</li> <li>A virtual environment tool (optional but recommended)</li> </ul>"},{"location":"get-started/installation/#installing-playbooks-ai","title":"Installing Playbooks AI","text":""},{"location":"get-started/installation/#basic-installation","title":"Basic Installation","text":"<p>The simplest way to install Playbooks AI is using pip:</p> <pre><code>pip install playbooks\n</code></pre> <p>This will install the core Playbooks AI package with all the essential dependencies.</p>"},{"location":"get-started/installation/#installation-in-a-virtual-environment","title":"Installation in a Virtual Environment","text":"<p>For a cleaner installation that doesn't affect your global Python environment, we recommend using a virtual environment:</p>"},{"location":"get-started/installation/#using-venv-built-into-python","title":"Using venv (built into Python)","text":"<pre><code># Create a virtual environment\npython -m venv playbooks-env\n\n# Activate the virtual environment\n# On Windows\nplaybooks-env\\Scripts\\activate\n# On macOS/Linux\nsource playbooks-env/bin/activate\n\n# Install Playbooks AI\npip install playbooks\n</code></pre>"},{"location":"get-started/installation/#using-poetry","title":"Using Poetry","text":"<p>If you're using Poetry for dependency management:</p> <pre><code># Create a new project with Poetry\npoetry new my-playbooks-project\ncd my-playbooks-project\n\n# Add Playbooks AI as a dependency\npoetry add playbooks\n\n# Activate the virtual environment\npoetry shell\n</code></pre>"},{"location":"get-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>You can verify that Playbooks AI is installed correctly by running:</p> <pre><code>python -c \"import playbooks; print(playbooks.__version__)\"\n</code></pre> <p>This should print the version number of the installed Playbooks AI package.</p>"},{"location":"get-started/installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>No optional dependencies are required for Playbooks AI.</p>"},{"location":"get-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"get-started/installation/#common-issues","title":"Common Issues","text":"<ul> <li>ImportError: No module named 'playbooks': The package isn't installed correctly. Try reinstalling.</li> <li>Version conflicts: If you have dependency conflicts, try installing in a fresh virtual environment.</li> <li>Permission errors: You might need administrator privileges. Try using <code>sudo pip install playbooks</code> on Unix systems or run as administrator on Windows.</li> </ul>"},{"location":"get-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter any issues during installation:</p> <ul> <li>Check the GitHub repository for known issues</li> <li>Join our community on Discord to get help from other users</li> <li>File an issue on GitHub if you've found a bug</li> </ul>"},{"location":"get-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have Playbooks AI installed, you can:</p> <ul> <li>Follow the Quickstart Guide to create your first playbook</li> <li>Explore the Playbooks Language documentation to learn about the syntax</li> </ul>"},{"location":"get-started/quickstart/","title":"Quickstart","text":"<p>This quickstart guide will help you create and run your first Playbooks AI program. By the end, you'll have a simple interactive program that asks for your name and provides a personalized greeting.</p>"},{"location":"get-started/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ul> <li>Installed Playbooks AI (see the Installation Guide)</li> <li>An API key for either Anthropic (Claude) or OpenAI (GPT-4)</li> </ul>"},{"location":"get-started/quickstart/#step-1-set-up-your-environment","title":"Step 1: Set Up Your Environment","text":"<p>First, you need to set up your environment variables to authenticate with the LLM provider of your choice.</p> <p>Create a <code>.env</code> file in your text editor and configure your API key and model:</p> <pre><code># For Anthropic\nANTHROPIC_API_KEY=your_anthropic_api_key_here\nMODEL=claude-3-7-sonnet-latest\n\n# OR for OpenAI\n# OPENAI_API_KEY=your_openai_api_key_here\n# MODEL=gpt-4o\n</code></pre> <p>Make sure to uncomment the appropriate API key and model for the service you're using, and replace the placeholder with your actual API key.</p>"},{"location":"get-started/quickstart/#step-2-create-your-first-playbooks-program","title":"Step 2: Create Your First Playbooks program","text":"<p>Create a new file named <code>hello.md</code> with the following content:</p> <pre><code># Personalized greeting\nThis program greets the user by name\n\n## Greet\n## Triggers\n- At the beginning\n## Steps\n- Ask the user for their name\n- Say hello to the user by name and welcome them to Playbooks AI\n- End program\n</code></pre> <p>This simple Playbooks program:</p> <ul> <li>Defines a \"Personalized greeting\" agent</li> <li>Defines a \"Greet\" playbook that triggers at the beginning of program execution</li> <li>Specifies steps to ask for the user's name and respond with a personalized greeting</li> </ul>"},{"location":"get-started/quickstart/#step-3-run-your-playbooks-program","title":"Step 3: Run Your Playbooks program","text":"<p>Now, run your program:</p> <pre><code>python -m playbooks.applications.agent_chat hello.md --verbose\n</code></pre> <p>You should see output similar to:</p> <pre><code>Loading playbooks from: ['hello.md']\nTranspiled playbook content\n\n\u256d\u2500 PersonalizedGreeting \u2500\u2500\u2500\u2500\u256e\n\u2502 Hello! What is your name? \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nUser: hey, my name is Amol\n\n\u256d\u2500 PersonalizedGreeting \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Hello Amol! Welcome to Playbooks AI. \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nExecution finished. Exiting...\n</code></pre> <p>Congratulations! You've successfully run your first Playbooks program.</p>"},{"location":"get-started/quickstart/#understanding-whats-happening","title":"Understanding What's Happening","text":"<p>Let's break down what happened:</p> <ol> <li>The Playbooks AI framework loaded your markdown file and transpiled it into an executable format</li> <li>The AgentChat application was launched, which provides a simple command-line chat interface</li> <li>The application started executing the program</li> <li>The playbook with the \"At the beginning\" trigger was automatically executed</li> <li>The agent followed the steps defined in your playbook:</li> <li>Asked for your name</li> <li>Processed your response</li> <li>Generated a personalized greeting</li> <li>Ended the program</li> </ol>"},{"location":"get-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've run your first playbook, you can:</p> <ul> <li>Go through the tutorials</li> <li>Learn about Triggers for more advanced event-based programming</li> <li>Learn how to create multi-agent systems</li> </ul>"},{"location":"multi-agent-systems/","title":"Multi-Agent Systems","text":"<ul> <li>See Multi-Agent Programming tutorial</li> <li>See Exported and Public Playbooks</li> </ul>"},{"location":"multi-agent-systems/exported-and-public-playbooks/","title":"Exported and Public Playbooks","text":""},{"location":"multi-agent-systems/exported-and-public-playbooks/#exported-playbooks","title":"Exported Playbooks","text":"<p>Exported playbooks are a powerful feature of Playbooks AI that allows an agent to execute playbooks defined by another agent within its own execution context as if they were implemented locally within the importing agent.</p> <p> Playbooks AI's exported playbooks capability is significantly more powerful than MCP's prompts because it enables true capability sharing and execution between agents, not just structured guidance. While MCP prompts are valuable for standardizing LLM interactions, Playbooks AI enables building extensible agent ecosystems with genuine code reuse and modular architectures.</p>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#public-playbooks","title":"Public Playbooks","text":"<p>When an agent marks a playbook as public, another agent can call that playbook remotely.</p> <p> Public playbooks are similar to MCP's tools. When a client calls a tool, it is executed on the MCP server. Similarly, when an agent calls a public playbook on another agent, it is executed on the called agent's server.</p>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#how-exported-playbooks-work","title":"How Exported Playbooks Work","text":"<p>When an agent exports a playbook, another agent can import implementation of that playbook and then execute that playbook within its execution context.</p>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#exporting-playbooks","title":"Exporting Playbooks","text":"<p> This feature under active development and not available yet.</p> <p>Exported playbooks are marked using the <code>export</code> keyword:</p> <pre><code># AccountManagementAgent\n\n```python\n@playbook(export=True)\nasync def CloseAccount($user_id) -&gt; str:\n    \"\"\"Close an account for a user.\"\"\"\n    # ...\n```\n\n## export: ProvisionAccount($user_id, $service_tier)\n### Steps\n- ...\n</code></pre> <p>In this example, the <code>AccountManagementAgent</code> exports the <code>CloseAccount</code> and <code>ProvisionAccount</code> playbooks.</p> <p> Implementations of both markdown and Python playbooks can be exported.</p>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#importing-exported-playbook-implementations","title":"Importing Exported Playbook Implementations","text":"<p>To import a playbook's implementation from another remote agent, register that remote agent and then use the <code>import</code> statement:</p> <pre><code># AccountManagementAgent(url=\"https://cloud.runplaybooks.ai/account-management\")\n\n# ServiceAgent\nimport CloseAccount, ProvisionAccount from AccountManagementAgent\n</code></pre> <p>This imports implementations of the <code>CloseAccount</code> Python playbook and the <code>ProvisionAccount</code> markdown playbook from the <code>AccountManagementAgent</code> agent.</p>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#using-imported-playbooks","title":"Using Imported Playbooks","text":"<p>Once imported, you can use the playbook just like any other playbook defined within your agent:</p> <pre><code>## CreateAccount\n### Steps\n- Validate user information\n- Create user record in database\n- ProvisionAccount($user_id, $service_tier)\n- Send welcome email to user\n</code></pre> <p>The imported <code>ProvisionAccount</code> playbook is called as if it were a local playbook.</p>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#how-public-playbooks-work","title":"How Public Playbooks Work","text":"<p> This feature under active development and not available yet.</p> <p>When agent A marks a playbook as public, another agent B can call that playbook remotely on a running instance of agent A.</p>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#marking-playbooks-as-public","title":"Marking Playbooks as Public","text":"<p>To mark a playbook as public, use the <code>public</code> keyword:</p> <pre><code># AuthenticationAgent\nThis agent handles user authentication.\n\n## public: VerifyCredentials($username, $password)\n### Steps\n- Check credentials against secure store\n- Return authentication result and user details if valid\n</code></pre> <p>Both markdown and Python playbooks can be marked as public.</p>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#calling-public-playbooks","title":"Calling Public Playbooks","text":"<p>To call a public playbook, first register the remote agent and then call the playbook as a method on that agent:</p> <pre><code># AuthenticationAgent(url=\"https://cloud.runplaybooks.ai/authentication\")\n\n# APIGatewayAgent\n\n## HandleRequest\n### Steps\n- $auth_result = AuthenticationAgent.VerifyCredentials($request.auth.username, $request.auth.password)\n- ...\n</code></pre> <p>Here, the <code>APIGatewayAgent</code> directly calls the <code>VerifyCredentials</code> playbook on the <code>AuthenticationAgent</code> instance running at <code>https://cloud.runplaybooks.ai/authentication</code>. The playbook is executed on the remote agent's server and the result is returned to the calling agent.</p>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#differences-between-exported-and-public-playbooks","title":"Differences Between Exported and Public Playbooks","text":"<p>Exported playbooks differ from public playbooks in several important ways:</p> Exported Playbooks Public Playbooks Example <code>import CloseAccount from AccountManagementAgent</code> and then <code>CloseAccount($user_id)</code> <code># PaymentProcessingAgent(\"https://cloud.runplaybooks.ai/ppa\")</code> and then <code>PaymentProcessingAgent.ProcessPayment($amount, $payment_method)</code> Execution Context Local execution in importing agent's context Remote procedure call on the remote agent instance State Access Can access local agent's state Cannot access local agent's state"},{"location":"multi-agent-systems/exported-and-public-playbooks/#security-considerations","title":"Security Considerations","text":"<p> Be careful! Importing playbooks raise several security considerations.</p> <ol> <li> <p>Code Injection: An agent that imports playbooks from another agent must trust that agent. Importing playbook implementations from untrusted agents and executing them can lead to security vulnerabilities like code injection attacks.</p> </li> <li> <p>Version Control: Changes to exported playbooks may affect importing agents, requiring careful version management.</p> </li> </ol>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#example-agent-ecosystem","title":"Example: Agent Ecosystem","text":"<p>Let's say that we have an ecosystem of three agents.</p>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#1-databaseagent","title":"1. DatabaseAgent","text":"<pre><code># DatabaseAgent\nThis agent provides recipes for various database related tasks.\n\n## export: FindTable($query, $database)\n### Steps\n- List all tables in the $database\n- Find the table that is most likely to contain data to answer the $query\n- Return the table name\n</code></pre> <p>Let's say that <code>DatabaseAgent</code> is available at the URL <code>https://cloud.runplaybooks.ai/database.agent</code>. It exports the <code>FindTable</code> playbook. It is a generic procedure for finding a database table.</p>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#2-authenticationagent","title":"2. AuthenticationAgent","text":"<pre><code># AuthenticationAgent\nThis agent handles user authentication.\n\n## public: VerifyCredentials($username, $password)\n### Steps\n- Check credentials against secure store\n- Return authentication result and user details if valid\n</code></pre> <p>Let's say that an instance of the <code>AuthenticationAgent</code> is running at the URL <code>https://cloud.runplaybooks.ai/authentication.agent</code>. The public <code>VerifyCredentials</code> playbook requires access to the secure store within ACME Corp's infrastructure.</p>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#3-apigatewayagent","title":"3. APIGatewayAgent","text":"<p>APIGatewayAgent uses the above two agents. It first registers those two agents, specifying their URLs. Then it imports the <code>FindTable</code> playbook from the <code>DatabaseAgent</code>. It then remotely calls the <code>VerifyCredentials</code> playbook on the <code>AuthenticationAgent</code> instance. Finally, it locally executes the <code>FindTable</code> playbook.</p> <pre><code># DatabaseAgent(url=\"https://cloud.runplaybooks.ai/database.agent\")\n\n# AuthenticationAgent(url=\"https://cloud.runplaybooks.ai/authentication.agent\")\n\n# APIGatewayAgent\nimport FindTable from DatabaseAgent\n\n## HandleRequest\n### Triggers\n- When an API request is received\n### Steps\n- $auth_result = AuthenticationAgent.VerifyCredentials($request.auth.username, $request.auth.password)\n- If $auth_result.success is true\n  - $table_name = FindTable($request.query, $database)\n  - Return $table_name\n- Otherwise\n  - Return authentication error\n</code></pre>"},{"location":"multi-agent-systems/exported-and-public-playbooks/#related-topics","title":"Related Topics","text":"<ul> <li>Multi-Agent Programming - More about setting up and using multiple agents</li> <li>Python Playbooks - How to create playbooks using Python</li> <li>Markdown Playbooks - Standard playbook structure</li> </ul>"},{"location":"observability/","title":"Observability","text":"<p>Playbooks AI provides comprehensive observability capabilities to help you monitor, debug, and optimize your AI agents. This is essential for building reliable and trustworthy AI systems, especially in production environments.</p>"},{"location":"observability/#overview","title":"Overview","text":"<p>The observability features in Playbooks AI enable you to:</p> <ul> <li>Monitor playbook execution and performance</li> <li>Track LLM interactions and token usage</li> <li>Debug complex agent workflows</li> <li>Gain insights into agent decision-making processes</li> <li>Measure and optimize costs</li> <li>Ensure compliance and auditability</li> </ul>"},{"location":"observability/#langfuse-integration","title":"LangFuse Integration","text":"<p>Playbooks AI integrates with LangFuse, an open-source observability platform specifically designed for LLM applications. LangFuse provides tracing, evaluation, and analytics for your AI agents.</p>"},{"location":"observability/#setting-up-langfuse","title":"Setting Up LangFuse","text":"<p>To enable LangFuse integration, you need to:</p> <ol> <li>Deploy your own LangFuse instance using docker compose or set up an account on LangFuse Cloud.</li> <li>Configure your environment variables in the <code>.env</code> file     <pre><code># LangFuse Configuration\nLANGFUSE_ENABLED=true\nLANGFUSE_PUBLIC_KEY=your_langfuse_public_key\nLANGFUSE_SECRET_KEY=your_langfuse_secret_key\nLANGFUSE_HOST=your_langfuse_instance_url\n</code></pre></li> </ol>"},{"location":"observability/#what-playbooks-ai-traces","title":"What Playbooks AI Traces","text":"<p>When LangFuse integration is enabled, Playbooks AI automatically traces:</p> <ol> <li>Playbook Executions: Each markdown and Python playbook run with timing and context</li> <li>LLM Interactions: Prompts, completions, tokens, and latency</li> <li>User Interactions: Messages and responses</li> <li>Agent State Changes: Variables and context updates</li> <li>Errors and Exceptions: Problems encountered during execution</li> </ol>"},{"location":"observability/#viewing-and-analyzing-data","title":"Viewing and Analyzing Data","text":"<p>After integrating with LangFuse, run a Playbooks program and then view the traces in the LangFuse dashboard.</p>"},{"location":"playbook-types/","title":"Playbook Types","text":"<p>Playbooks AI supports multiple types of playbooks, each with its own strengths and use cases. This flexibility allows you to choose the right tool for each aspect of your agent's behavior.</p>"},{"location":"playbook-types/#overview-of-playbook-types","title":"Overview of Playbook Types","text":""},{"location":"playbook-types/#markdown-playbooks","title":"Markdown Playbooks","text":"<p>Markdown playbooks use a structured format with clear sections for triggers, steps, and notes. They are ideal for:</p> <ul> <li>Prescribed business processes with clear steps</li> <li>Customer service workflows</li> <li>Support scripts</li> <li>Situations where the agent should follow a specific, predefined flow</li> </ul> <pre><code>## GreetCustomer\nThis playbook greets the customer and collects their information.\n\n### Triggers\n- At the beginning\n\n### Steps\n- Greet the user and ask for their name\n- Ask the user how you can help them today\n</code></pre>"},{"location":"playbook-types/#react-playbooks","title":"ReAct Playbooks","text":"<p>ReAct playbooks leverage the LLM's reasoning capabilities through a descriptive prompt. They are ideal for:</p> <ul> <li>Complex problem-solving tasks</li> <li>Research and information gathering</li> <li>Dynamic planning</li> <li>Situations requiring flexible, adaptive behavior</li> </ul> <pre><code>## ResearchProduct\nResearch information about a product the user is interested in.\n\nSearch for detailed product information, customer reviews, \npricing data, and comparisons with similar products. Analyze \nthe information to provide a comprehensive overview that \nhelps the user make an informed decision.\n</code></pre>"},{"location":"playbook-types/#python-playbooks","title":"Python Playbooks","text":"<p>Python playbooks give you the full power of Python for complex logic and external integrations. They are ideal for:</p> <ul> <li>Complex calculations</li> <li>Data processing and transformation</li> <li>Integration with external systems and APIs</li> <li>Implementing business logic</li> </ul> <pre><code>```python\n@playbook\nasync def CalculateShipping(weight: float, destination: str) -&gt; float:\n    \"\"\"Calculate shipping costs based on weight and destination.\"\"\"\n    base_rate = 5.99\n\n    # Apply weight multiplier\n    weight_cost = weight * 0.5\n\n    # Apply destination surcharge\n    destination_surcharge = get_destination_surcharge(destination)\n\n    return base_rate + weight_cost + destination_surcharge\n```\n</code></pre>"},{"location":"playbook-types/#mixing-playbook-types","title":"Mixing Playbook Types","text":"<p>One of the powerful features of Playbooks AI is the ability to mix different types of playbooks within the same agent or program. This allows you to define your agent's behavior in a flexible and modular way.</p>"},{"location":"playbook-types/#next-steps","title":"Next Steps","text":"<p>Explore each playbook type in detail:</p> <ul> <li>Markdown Playbooks - For structured, step-by-step flows</li> <li>ReAct Playbooks - For reasoning-based, adaptive behavior</li> <li>Python Playbooks - For complex logic and integrations</li> </ul> <p>Also see:</p> <ul> <li>Exported and Public Playbooks - For multi-agent systems</li> <li>Multi-Agent Programming - For creating multi-agent systems</li> </ul>"},{"location":"playbook-types/builtin-playbooks/","title":"Built-in Playbooks","text":"<p>Playbooks AI provides a set of built-in playbooks that are available to every agent without requiring explicit import or definition. These playbooks handle common operations like communication, artifact management, and program control flow.</p>"},{"location":"playbook-types/builtin-playbooks/#available-built-in-playbooks","title":"Available Built-in Playbooks","text":""},{"location":"playbook-types/builtin-playbooks/#sendmessagetarget_agent_id-str-message-str","title":"<code>SendMessage(target_agent_id: str, message: str)</code>","text":"<p>Sends a message to another agent or the user.</p> <pre><code>@playbook\nasync def SendMessage(target_agent_id: str, message: str):\n    \"\"\"\n    Send a message to another agent.\n\n    Args:\n        target_agent_id (str): The ID of the agent to send the message to.\n                               Use \"human\" to send a message to the user.\n        message (str): The content of the message.\n\n    Returns:\n        None\n    \"\"\"\n    ...\n</code></pre> <p>Example usage: <pre><code>### Steps\n- Send message to SupportAgent \"Please assist with this customer inquiry\"\n- Tell the user their request has been forwarded to a specialist\n</code></pre></p>"},{"location":"playbook-types/builtin-playbooks/#saymessage-str","title":"<code>Say(message: str)</code>","text":"<p>A convenience playbook that sends a message to the human user.</p> <pre><code>@playbook\nasync def Say(message: str):\n    \"\"\"\n    Send a message to the human user.\n\n    This is a convenience wrapper around SendMessage(\"human\", message).\n\n    Args:\n        message (str): The message to send to the user.\n\n    Returns:\n        None\n    \"\"\"\n    await SendMessage(\"human\", message)\n</code></pre> <p>Example usage: <pre><code>### Steps\n- Say hello to the user\n- Say(\"Here's your ticket link: https://support.playbooks.ai/tickets/{$ticket_id}\")\n</code></pre></p>"},{"location":"playbook-types/builtin-playbooks/#waitformessagesource_agent_id-str-str-none","title":"<code>WaitForMessage(source_agent_id: str) -&gt; str | None</code>","text":"<p>Waits for a message from a specific agent or user.</p> <pre><code>@playbook\nasync def WaitForMessage(source_agent_id: str) -&gt; str | None:\n    \"\"\"\n    Wait for a message from a specific agent.\n\n    Args:\n        source_agent_id (str): The ID of the agent to wait for a message from.\n                               Use \"human\" to wait for a user message.\n\n    Returns:\n        str or None: The content of the received message, or None if the wait timed out.\n    \"\"\"\n    ...\n</code></pre> <p>Example: <pre><code>### Steps\n- SendMessage(\"SupportAgent\", \"What is the return policy for Canada?\")\n- $return_policy = WaitForMessage(\"SupportAgent\")\n- ...\n</code></pre></p>"},{"location":"playbook-types/builtin-playbooks/#saveartifactartifact_name-str-artifact_summary-str-artifact_content-str","title":"<code>SaveArtifact(artifact_name: str, artifact_summary: str, artifact_content: str)</code>","text":"<p>Saves data as a named artifact for later retrieval.</p> <pre><code>@playbook\nasync def SaveArtifact(artifact_name: str, artifact_summary: str, artifact_content: str):\n    \"\"\"\n    Save data as a named artifact.\n\n    Args:\n        artifact_name (str): The name to give the artifact, typically with an extension\n                             (e.g., \"report.md\", \"data.json\").\n        artifact_summary (str): A brief description of the artifact.\n        artifact_content (str): The actual content to store in the artifact.\n\n    Returns:\n        None\n    \"\"\"\n    ...\n</code></pre> <p>Example: <pre><code>### Steps\n- Generate a detailed analysis report\n- SaveArtifact(\"quarterly_report.md\", \"Q3 2023 Sales Analysis\", generated report)\n- Tell the user the report has been saved at Artifact[\"quarterly_report.md\"]\n</code></pre></p>"},{"location":"playbook-types/builtin-playbooks/#loadartifactartifact_name-str","title":"<code>LoadArtifact(artifact_name: str)</code>","text":"<p>Loads a previously saved artifact by name.</p> <pre><code>@playbook\nasync def LoadArtifact(artifact_name: str):\n    \"\"\"\n    Load a previously saved artifact by name.\n\n    Args:\n        artifact_name (str): The name of the artifact to load.\n\n    Returns:\n        Artifact: An object with properties:\n            - name: The artifact's name\n            - description: The artifact's summary\n            - content: The artifact's content\n\n    Raises:\n        KeyError: If the artifact doesn't exist\n    \"\"\"\n    ...\n</code></pre> <p>Example: <pre><code>### Steps\n- LoadArtifact(\"Q1_report.md\")\n- LoadArtifact(\"Q2_report.md\")\n- LoadArtifact(\"Q3_report.md\")\n- LoadArtifact(\"Q4_report.md\")\n- Analyze the content of the quarterly reports and generate annual report\n- SaveArtifact(\"annual_report.md\", \"Annual Report\", generated annual report)\n</code></pre></p>"},{"location":"playbook-types/builtin-playbooks/#returnvaluenone","title":"<code>Return(value=None)</code>","text":"<p>Returns a value from the current playbook and ends its execution.</p> <pre><code>@playbook\nasync def Return(value=None):\n    \"\"\"\n    Return a value from the current playbook and end execution.\n\n    Args:\n        value: The value to return (optional).\n\n    Returns:\n        The provided value, or None if no value was provided.\n    \"\"\"\n    ...\n</code></pre> <p>Example: <pre><code>## GetDiscount($membership_level)\n### Steps\n- If $membership_level is \"premium\"\n  - Return(0.15)  # 15% discount\n- If $membership_level is \"standard\"\n  - Return(0.05)  # 5% discount\n- Return(0)  # No discount\n</code></pre></p>"},{"location":"playbook-types/builtin-playbooks/#related-topics","title":"Related Topics","text":"<ul> <li>Markdown Playbooks - Using built-in playbooks in markdown</li> <li>Python Playbooks - Using built-in playbooks in Python</li> <li>Working with Artifacts - More on artifacts</li> <li>Multi-Agent Systems - Communication between agents</li> </ul>"},{"location":"playbook-types/markdown-playbooks/","title":"Markdown Playbooks","text":"<p>Markdown playbooks are used to define a business process that the agent should follow. They define agent behavior using a clear, step-by-step approach with explicit sections for triggers, steps, and notes.</p>"},{"location":"playbook-types/markdown-playbooks/#overview","title":"Overview","text":"<p>Markdown playbooks are ideal for:</p> <ul> <li>Prescribed business processes with clear steps</li> <li>Customer service workflows</li> <li>Support scripts</li> <li>Situations where the agent should follow a specific, predefined flow</li> </ul>"},{"location":"playbook-types/markdown-playbooks/#structure-of-a-markdown-playbook","title":"Structure of a Markdown Playbook","text":"<p>A markdown playbook follows this structure:</p> <pre><code>## PlaybookName\nPlaybook description\n\n### Triggers\n- Trigger condition 1\n- Trigger condition 2\n\n### Steps\n- Step 1\n- Step 2\n- Step 3\n\n### Notes\n- Note 1\n- Note 2\n</code></pre>"},{"location":"playbook-types/markdown-playbooks/#playbook-definition","title":"Playbook Definition","text":"<p>The playbook is defined with a second-level heading (<code>##</code>) followed by the playbook name. By convention, playbook names use PascalCase (e.g., <code>GreetCustomer</code>, <code>ProcessOrder</code>), but they can be any text (e.g. <code>greet the customer</code>, <code>process_order</code>).</p> <p>A description should follow the playbook name, explaining what the playbook does and when it should be used.</p>"},{"location":"playbook-types/markdown-playbooks/#parameters","title":"Parameters","text":"<p>Playbooks can accept parameters, which are indicated in the playbook name:</p> <pre><code>## CalculateDiscount($total, $membership_level)\nThis playbook calculates the appropriate discount based on the total order value and membership level.\n</code></pre> <p>These parameters will be available as variables within the playbook.</p>"},{"location":"playbook-types/markdown-playbooks/#triggers-section","title":"Triggers Section","text":"<p>The <code>### Triggers</code> section defines the conditions under which the playbook should execute. The playbook will run when any of the listed triggers are met.</p> <p>Common trigger types include:</p>"},{"location":"playbook-types/markdown-playbooks/#temporal-triggers","title":"Temporal Triggers","text":"<pre><code>### Triggers\n- At the beginning\n- When program starts\n- After 5 minutes\n</code></pre>"},{"location":"playbook-types/markdown-playbooks/#user-interaction-triggers","title":"User Interaction Triggers","text":"<pre><code>### Triggers\n- When user provides their email\n- When user asks about pricing\n- When user wants to speak to a human\n</code></pre>"},{"location":"playbook-types/markdown-playbooks/#state-based-triggers","title":"State-Based Triggers","text":"<pre><code>### Triggers\n- When $balance becomes negative\n- When $cart_total exceeds 100\n- When $attempts is greater than 3\n</code></pre>"},{"location":"playbook-types/markdown-playbooks/#execution-flow-triggers","title":"Execution Flow Triggers","text":"<pre><code>### Triggers\n- After calling VerifyIdentity\n- Before calling ProcessPayment\n- When CheckoutProcess fails\n</code></pre>"},{"location":"playbook-types/markdown-playbooks/#steps-section","title":"Steps Section","text":"<p>The <code>### Steps</code> section contains a list of steps to execute, in order. Each step is a bullet point that describes an action to take:</p> <pre><code>### Steps\n- Greet the user and ask for their name\n- $name = user's response\n- If $name is empty\n  - Ask for their name again\n- Tell the user \"Hello, $name! How can I help you today?\"\n</code></pre> <p>Steps can include:</p>"},{"location":"playbook-types/markdown-playbooks/#imperative-actions","title":"Imperative Actions","text":"<pre><code>- Greet the user\n- Ask the user for their order number\n- Tell the user their order status\n</code></pre>"},{"location":"playbook-types/markdown-playbooks/#variable-assignments","title":"Variable Assignments","text":"<pre><code>- $total = $price * $quantity\n- $shipping_cost = CalculateShipping($weight, $destination)\n- Extract $relevant_info from the search results\n</code></pre>"},{"location":"playbook-types/markdown-playbooks/#conditional-logic","title":"Conditional Logic","text":"<pre><code>- If $order_total &gt; 100\n  - Apply free shipping\n- If user is not satisfied\n  - Offer a discount\n  - Ask if they want to speak with a manager\n- Otherwise\n  - Thank them for their feedback\n</code></pre>"},{"location":"playbook-types/markdown-playbooks/#loops","title":"Loops","text":"<pre><code>- While conversation is active\n  - Wait for user input\n  - Respond appropriately\n- For each $product in $cart\n  - Calculate $product_total\n  - Add $product_total to $grand_total\n</code></pre>"},{"location":"playbook-types/markdown-playbooks/#playbook-calls","title":"Playbook Calls","text":"<pre><code>- ValidateEmail($email)\n- $shipping_cost = CalculateShipping($weight, $destination)\n- ProcessPayment($order_total)\n</code></pre>"},{"location":"playbook-types/markdown-playbooks/#control-flow","title":"Control Flow","text":"<pre><code>- End program\n- Return $result\n</code></pre>"},{"location":"playbook-types/markdown-playbooks/#notes-section","title":"Notes Section","text":"<p>The <code>### Notes</code> section provides additional guidance or rules for the playbook's execution:</p> <pre><code>### Notes\n- Maintain a professional tone throughout the conversation\n- If the user mentions a competitor, highlight our unique advantages\n- If the user is from California, mention that we're compliant with CCPA\n</code></pre> <p>Notes are used to handle exceptions, provide style guidance, or specify business rules that apply throughout the playbook.</p>"},{"location":"playbook-types/markdown-playbooks/#example-customer-support-playbook","title":"Example: Customer Support Playbook","text":"<p>Here's a complete example of a markdown playbook for handling order status inquiries:</p> <pre><code>## CheckOrderStatusFlow($authToken)\nCheck the status of an order.\n\n### Trigger\n- When the user is authenticated and requests order status\n\n### Steps\n- Ask user for $orderId\n- $orderStatus = GetOrderStatus($orderId)\n- Extract $expectedDeliveryDate from $orderStatus\n- Say(\"Your order {$orderId} is expected to be delivered on {$expectedDeliveryDate}.\")\n\n### Notes\n- The $orderStatus dictionary includes the keys: orderId, expectedDeliveryDate.\n- Always confirm that $authToken is valid before calling GetOrderStatus.\n</code></pre>"},{"location":"playbook-types/markdown-playbooks/#best-practices-for-markdown-playbooks","title":"Best Practices for Markdown Playbooks","text":"<ol> <li>Be specific and clear: Write steps that clearly describe what the agent should do.</li> <li>Use variables consistently: Use the <code>$</code> prefix for all variables and maintain consistent naming.</li> <li>Handle edge cases: Include steps for handling unexpected user responses or system failures.</li> <li>Break down complex tasks: Keep steps simple and focused on a single action.</li> <li>Use playbook calls: Factor out reusable logic into separate playbooks that can be called.</li> <li>Provide helpful notes: Use the Notes section to guide the agent on tone, exceptions, and business rules.</li> <li>Use meaningful trigger conditions: Make trigger conditions specific to ensure playbooks run at the right time.</li> </ol>"},{"location":"playbook-types/markdown-playbooks/#related-topics","title":"Related Topics","text":"<ul> <li>ReAct Playbooks - For less structured, reasoning-based approaches</li> <li>Python Playbooks - For complex logic and integrations</li> <li>Calling Playbooks - How to call one playbook from another</li> <li>Adding Triggers - More about trigger types and usage</li> </ul>"},{"location":"playbook-types/python-playbooks/","title":"Python Playbooks","text":"<p>Python playbooks provide the full power and flexibility of Python within the Playbooks AI framework. They allow you to implement complex logic, integrate with external systems, and leverage the entire Python ecosystem.</p>"},{"location":"playbook-types/python-playbooks/#overview","title":"Overview","text":"<p>Python playbooks are ideal for:</p> <ul> <li>Complex calculations and algorithms</li> <li>Data processing and transformation</li> <li>Integration with external systems and APIs</li> <li>Implementing precise business logic</li> <li>Working with databases and file systems</li> <li>Handling structured data</li> </ul>"},{"location":"playbook-types/python-playbooks/#creating-python-playbooks","title":"Creating Python Playbooks","text":"<p>Python playbooks are defined using the <code>@playbook</code> decorator applied to async Python functions in a ```python code block:</p> <pre><code>```python\n@playbook\nasync def calculate_shipping(weight: float, destination: str) -&gt; float:\n    \"\"\"Calculate shipping costs based on weight and destination.\"\"\"\n    base_rate = 5.99\n\n    # Apply weight multiplier\n    weight_cost = weight * 0.5\n\n    # Apply destination surcharge\n    destination_surcharge = get_destination_surcharge(destination)\n\n    return base_rate + weight_cost + destination_surcharge\n```\n</code></pre>"},{"location":"playbook-types/python-playbooks/#the-playbook-decorator","title":"The @playbook Decorator","text":"<p>The <code>@playbook</code> decorator registers a Python function as a playbook that can be called by other playbooks or triggered based on conditions.</p> <pre><code>@playbook(\n    triggers=[\"When user provides payment information\"],\n    public=True\n)\nasync def process_payment(amount: float, card_info: dict) -&gt; bool:\n    \"\"\"Process a payment transaction.\"\"\"\n    # Payment processing logic\n    return True\n</code></pre>"},{"location":"playbook-types/python-playbooks/#decorator-parameters","title":"Decorator Parameters","text":"<p>The <code>@playbook</code> decorator accepts several optional parameters:</p> <ul> <li><code>triggers</code>: A list of trigger conditions (as strings) that will cause the playbook to execute</li> <li><code>public</code>: A boolean indicating whether the playbook should be available to other agents</li> <li><code>description</code>: An optional description of the playbook (the docstring is used if not provided)</li> </ul>"},{"location":"playbook-types/python-playbooks/#type-annotations","title":"Type Annotations","text":"<p>Python playbooks should use type annotations for parameters and return values:</p> <pre><code>@playbook\nasync def calculate_total(\n    price: float,      # The price per item\n    quantity: int,     # The number of items\n    discount: float = 0.0  # Optional discount percentage\n) -&gt; float:            # The total price\n    \"\"\"Calculate the total price after applying discount.\"\"\"\n    total = price * quantity\n    if discount &gt; 0:\n        total = total * (1 - discount / 100)\n    return total\n</code></pre>"},{"location":"playbook-types/python-playbooks/#docstrings","title":"Docstrings","text":"<p>Every Python playbook should include a docstring that explains: - What the playbook does - The purpose of each parameter - What the return value represents - Any side effects or important behavior notes</p> <pre><code>@playbook\nasync def validate_address(address: dict) -&gt; bool:\n    \"\"\"\n    Validate a shipping address against postal service records.\n\n    Args:\n        address (dict): A dictionary containing address components:\n            - street: The street address\n            - city: The city name\n            - state: The state/province code\n            - zip: The postal/zip code\n            - country: The country code (ISO 2-letter)\n\n    Returns:\n        bool: True if the address is valid, False otherwise\n\n    Note:\n        This playbook makes API calls to an external validation service\n        and may have rate limits.\n    \"\"\"\n    # Address validation logic\n    return True\n</code></pre>"},{"location":"playbook-types/python-playbooks/#including-python-playbooks-in-your-program","title":"Including Python Playbooks in Your Program","text":"<p>Python playbooks are included within markdown playbooks using code blocks:</p> <pre><code># Order Processing\nThis program handles order processing workflows.\n\n```python\n@playbook\nasync def calculate_tax(subtotal: float, state: str) -&gt; float:\n    \"\"\"Calculate sales tax based on state.\"\"\"\n    tax_rates = {\n        \"CA\": 0.0725,\n        \"NY\": 0.045,\n        \"TX\": 0.0625,\n        # Other states...\n    }\n\n    default_rate = 0.05  # Default tax rate\n    rate = tax_rates.get(state.upper(), default_rate)\n\n    return subtotal * rate\n```\n\n## ProcessOrder\nThis playbook processes a new order.\n\n### Triggers\n- When user submits an order\n\n### Steps\n- Validate the order details\n- Calculate the subtotal\n- $tax = calculate_tax($subtotal, $customer.state)\n- $total = $subtotal + $tax + $shipping\n- Process the payment\n- Create the order in the database\n- Send confirmation to the customer\n</code></pre>"},{"location":"playbook-types/python-playbooks/#async-and-await","title":"Async and Await","text":"<p>All Python playbooks must be defined as <code>async</code> functions, and when calling other playbooks, you must use the <code>await</code> keyword:</p> <pre><code>@playbook\nasync def process_order(order: dict) -&gt; bool:\n    \"\"\"Process an order end-to-end.\"\"\"\n    # Validate order\n    is_valid = await validate_order(order)\n    if not is_valid:\n        return False\n\n    # Calculate costs\n    subtotal = calculate_subtotal(order[\"items\"])\n    tax = await calculate_tax(subtotal, order[\"state\"])\n    shipping = await calculate_shipping(order[\"weight\"], order[\"address\"])\n\n    # Process payment\n    payment_success = await process_payment(subtotal + tax + shipping, order[\"payment\"])\n\n    return payment_success\n</code></pre>"},{"location":"playbook-types/python-playbooks/#public-python-playbooks","title":"Public Python Playbooks","text":"<p>To make a Python playbook available to other agents to call, use the <code>public=True</code> parameter:</p> <pre><code>@playbook(public=True)\nasync def currency_conversion(amount: float, from_currency: str, to_currency: str) -&gt; float:\n    \"\"\"Convert an amount between currencies using current exchange rates.\"\"\"\n    # Currency conversion logic\n    return converted_amount\n</code></pre>"},{"location":"playbook-types/python-playbooks/#error-handling","title":"Error Handling","text":"<p>Python playbooks should include proper error handling:</p> <pre><code>@playbook\nasync def safe_api_call(endpoint: str, params: dict) -&gt; dict:\n    \"\"\"Make a safer API call with error handling.\"\"\"\n    import requests\n\n    try:\n        response = requests.get(endpoint, params=params, timeout=10)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.Timeout:\n        await Say(\"The service is taking too long to respond. Please try again later.\")\n        return {\"error\": \"timeout\"}\n    except requests.exceptions.HTTPError as e:\n        await Say(f\"There was an error communicating with the service: {e}\")\n        return {\"error\": \"http_error\", \"details\": str(e)}\n    except Exception as e:\n        await Say(\"An unexpected error occurred. Please try again later.\")\n        return {\"error\": \"unknown\", \"details\": str(e)}\n</code></pre>"},{"location":"playbook-types/python-playbooks/#best-practices-for-python-playbooks","title":"Best Practices for Python Playbooks","text":"<ol> <li>Keep functions focused: Each playbook should do one thing well</li> <li>Use proper typing: Include type annotations for all parameters and return values</li> <li>Add comprehensive docstrings: Document what the playbook does and how to use it</li> <li>Handle errors gracefully: Include try/except blocks and provide helpful error messages</li> <li>Be mindful of performance: Consider execution time, especially for external API calls</li> <li>Use environment variables for secrets: Never hardcode API keys or credentials</li> <li>Modularize complex logic: Break down complex tasks into multiple playbooks</li> <li>Use consistent naming: Follow a consistent convention for playbook names (usually snake_case)</li> <li>Test thoroughly: Ensure playbooks handle edge cases and unexpected inputs</li> <li>Consider concurrency: Use async patterns effectively for I/O-bound operations</li> </ol>"},{"location":"playbook-types/python-playbooks/#related-topics","title":"Related Topics","text":"<ul> <li>Markdown Playbooks - For structured, step-by-step flows</li> <li>ReAct Playbooks - For reasoning-based, adaptive behavior</li> </ul>"},{"location":"playbook-types/react-playbooks/","title":"ReAct Playbooks","text":"<p>ReAct playbooks are a specialized type of playbook in the Playbooks AI framework that leverage the reasoning and planning capabilities of large language models. Unlike standard markdown playbooks, ReAct playbooks focus on dynamic problem-solving with less rigid structure.</p>"},{"location":"playbook-types/react-playbooks/#overview","title":"Overview","text":"<p>ReAct playbooks are ideal for:</p> <ul> <li>Complex problem-solving tasks</li> <li>Deep research and information gathering tasks</li> <li>Dynamic planning</li> <li>Tasks where the exact steps aren't known in advance</li> </ul>"},{"location":"playbook-types/react-playbooks/#structure-of-a-react-playbook","title":"Structure of a ReAct Playbook","text":"<p>A ReAct playbook is defined as a standard markdown playbook, but without the <code>### Steps</code> section:</p> <pre><code>## PlaybookName\nDetailed description or prompt for the task, goals, and constraints. Do not use markdown in the prompt.\n\n### Triggers\n- Trigger condition 1\n- Trigger condition 2\n</code></pre> <p>The key difference is that ReAct playbooks do not include a <code>### Steps</code> section. Instead, the system provides a default ReAct execution flow that implements a \"think - plan - select tool - execute tool - interact - evaluate\" cycle.</p> <p> Do not use markdown in the prompt for ReAct playbooks because that will interfere with the playbook program's structure that uses #, ## and ### headings. Use xml tags like <code>&lt;output_format&gt;</code>, <code>&lt;planning_rules&gt;</code>,  <code>&lt;style_guide&gt;</code>, etc. for defining various parts of the prompt.</p>"},{"location":"playbook-types/react-playbooks/#playbook-definition","title":"Playbook Definition","text":"<p>Like other playbooks, a ReAct playbook is defined with a second-level heading (<code>##</code>) followed by the playbook name.</p> <p>The description that follows the playbook name is much more important in ReAct playbooks, as it serves as the primary instruction set for the LLM. This description should be detailed and clear about:</p> <ol> <li>The objective of the playbook</li> <li>The constraints and requirements</li> <li>The expected output or deliverable</li> <li>Any special considerations or approaches to take</li> </ol>"},{"location":"playbook-types/react-playbooks/#triggers-section","title":"Triggers Section","text":"<p>The <code>### Triggers</code> section works the same way as in standard markdown playbooks, defining the conditions under which the playbook should execute.</p>"},{"location":"playbook-types/react-playbooks/#default-react-execution-flow","title":"Default ReAct Execution Flow","text":"<p>When a ReAct playbook is executed, the system applies a default execution flow that follows this pattern (this is a reference implementation, and may change in the future):</p> <pre><code>- Think deeply about the task to understand requirements and context\n- If task needs clarification\n  - Ask the user clarification questions\n  - Wait for user response\n  - Update understanding of the task with user's response\n- Initialize $task with clarified understanding and context of the task\n- Initialize $task_status with \"started\"\n- While $task_status is not \"complete\"\n  - Think about the current state; Check if any playbooks can be used; create/update your plan for completing the task\n  - Based on the plan, decide the next $task_action, one of [\"call\", \"communicate\", \"finish\"]; must produce a \"finish\" action at the end\n  - If $task_action is \"call\"\n    - Queue calls to appropriate playbooks with appropriate parameters\n    - Wait for all the calls to complete\n  - If $task_action is \"communicate\"\n    - Decide whether to ask or tell: $communication_type\n    - If $communication_type is \"ask\"\n      - Formulate and ask question to the user\n      - Wait for user response\n    - If $communication_type is \"tell\"\n      - Say appropriate message to the user\n  - If $task_action is \"finish\"\n    - If task is expected to produce a comprehensive report\n      - Generate final result; follow the output format if specified; save the result as an artifact `SaveArtifact(\"name of report file.md\", \"One line summary of the report\", \"report content...\")`\n      - Return artifact reference 'Artifact[\"name of report file.md\"]'\n    - If task is expected to produce a short answer\n      - Generate final result; follow the output format if specified\n      - Return the answer as a string\n    - Set $task_status to \"complete\"\n</code></pre> <p>This execution flow enables the LLM to:</p> <ol> <li>Think - Analyze the task and context</li> <li>Plan - Formulate a strategy to complete the task</li> <li>Act - Execute the plan through calling playbooks, communicating with the user, or producing a final result</li> <li>Observe - Process results and user feedback</li> <li>Reflect - Update understanding and refine the plan</li> </ol>"},{"location":"playbook-types/react-playbooks/#example-research-playbook","title":"Example: Research Playbook","text":"<p>Here's an example of a ReAct playbook for product research:</p> <pre><code>## ResearchProduct\nThis playbook conducts comprehensive research on a product specified by the user. The research should include:\n\n1. General product information (features, specifications, pricing)\n2. Customer reviews and sentiment analysis\n3. Comparison with at least 3 competing products\n4. Pros and cons based on the research\n5. A final recommendation with justification\n\nUse WebSearch to find relevant information. Analyze the data critically and present findings in a clear, organized format. Prioritize recent sources (within the last year if possible) and reputable websites.\n\n&lt;planning_rules&gt;\n- Always start by determining the exact product to research\n- Create a structured research plan with specific queries\n- Perform multiple searches with different queries to get comprehensive information\n- Group searches by category (general info, reviews, comparisons)\n- Verify information across multiple sources when possible\n- If conflicting information is found, note the discrepancy and evaluate source credibility\n&lt;/planning_rules&gt;\n\n&lt;style_guide&gt;\n- Write in a neutral, objective tone\n- Use clear headings and subheadings for organization\n- Present pros and cons in balanced fashion\n- Support claims with evidence from research\n- When providing your recommendation, clearly explain your reasoning\n&lt;/style_guide&gt;\n\n&lt;output_format&gt;\n# Product Research: [Product Name]\n\n## Overview\n[General product information]\n\n## Features and Specifications\n[Detailed features]\n\n## Customer Sentiment\n[Analysis of customer reviews]\n\n## Competitive Comparison\n[Comparison with alternatives]\n\n## Pros and Cons\n[Balanced assessment]\n\n## Recommendation\n[Final recommendation with justification]\n&lt;/output_format&gt;\n\n### Triggers\n- When user wants to research a product\n</code></pre>"},{"location":"playbook-types/react-playbooks/#benefits-of-react-playbooks","title":"Benefits of ReAct Playbooks","text":"<p>ReAct playbooks offer several advantages:</p> <ol> <li>Flexibility: They can handle a wide range of tasks without needing to specify exact steps in advance.</li> <li>Reasoning: They leverage the LLM's reasoning capabilities to solve complex problems.</li> <li>Adaptability: They can adjust their approach based on new information or changing requirements.</li> <li>Contextual understanding: They consider the broader context and can make more nuanced decisions.</li> <li>Natural language guidance: They can be directed with natural language instructions rather than rigid steps.</li> </ol>"},{"location":"playbook-types/react-playbooks/#when-to-use-react-playbooks-vs-markdown-playbooks","title":"When to Use ReAct Playbooks vs. Markdown Playbooks","text":"<p>Use ReAct playbooks when:</p> <ul> <li>The exact sequence of steps can't be predetermined</li> <li>The task requires complex reasoning or research</li> <li>The task has many possible approaches or paths</li> <li>You want to leverage the LLM's problem-solving abilities</li> <li>The task requires synthesis of information from multiple sources</li> </ul> <p>Use standard markdown playbooks when:</p> <ul> <li>The workflow is well-defined and predictable</li> <li>You want to ensure specific steps are followed in a precise order</li> <li>The task is relatively simple with clear decision points</li> <li>Consistency and predictability are more important than flexibility</li> </ul>"},{"location":"playbook-types/react-playbooks/#best-practices-for-react-playbooks","title":"Best Practices for ReAct Playbooks","text":"<ol> <li>Be clear about objectives: Clearly define what the playbook should accomplish.</li> <li>Provide context: Include relevant background information.</li> <li>Define constraints: Specify any limitations or requirements.</li> <li>Use special sections: Leverage planning rules, style guides, and output format sections.</li> <li>Don't overspecify: Avoid trying to dictate the exact thinking process.</li> <li>Test extensively: ReAct playbooks may behave differently across runs, so test thoroughly.</li> </ol>"},{"location":"playbook-types/react-playbooks/#related-topics","title":"Related Topics","text":"<ul> <li>Markdown Playbooks - For more structured, step-by-step approaches</li> <li>Python Playbooks - For complex logic and integrations</li> <li>Working with Artifacts - How ReAct playbooks can create and store data</li> </ul>"},{"location":"playbooks-language/","title":"Playbooks Language","text":"<p>Playbooks Language is a human-readable, semantically interpreted programming language designed specifically for building AI agents. It allows developers to define agent behavior using natural language within a structured markdown format, combined with the power and flexibility of Python.</p>"},{"location":"playbooks-language/#overview","title":"Overview","text":"<p>Playbooks Language enables you to:</p> <ul> <li>Write agent logic in a way that's understandable by both humans and AI</li> <li>Seamlessly integrate natural language instructions with Python code</li> <li>Create reusable, modular components that can be composed into complex workflows</li> <li>Implement event-driven behavior through triggers</li> <li>Build multi-agent systems where agents can communicate and collaborate</li> </ul>"},{"location":"playbooks-language/#program-structure","title":"Program Structure","text":"<p>A Playbooks program consists of one or more agents, each containing one or more playbooks. The basic structure follows standard markdown heading conventions:</p> <pre><code># Agent name\nAgent description and overview\n\n```python\n# Python playbooks are defined here using the @playbook decorator\n```\n\n## Playbook name\nPlaybook description\n\n### Triggers\n- Trigger conditions\n\n### Steps\n- Step-by-step instructions\n\n### Notes\n- Additional notes, instructions and rules\n</code></pre>"},{"location":"playbooks-language/#program-components","title":"Program Components","text":""},{"location":"playbooks-language/#1-agent-definition","title":"1. Agent Definition","text":"<p>Agents are defined using a top-level heading (<code>#</code>) followed by the agent name and an optional description:</p> <pre><code># Customer Service Agent\nThis agent handles customer service inquiries and guides users through the support process.\n</code></pre> <p>An agent can have multiple playbooks and can include Python code that's accessible to its playbooks.</p>"},{"location":"playbooks-language/#2-python-functions-as-playbooks","title":"2. Python Functions as Playbooks","text":"<p>Python functions can be defined as playbooks using the <code>@playbook</code> decorator:</p> <pre><code>@playbook\nasync def CalculateTotal(price: float, quantity: int) -&gt; float:\n    \"\"\"Calculate the total price for a given quantity of items.\"\"\"\n    return price * quantity\n\n@playbook(triggers=[\"When user provides payment information\"])\nasync def ProcessPayment(amount: float, card_info: dict) -&gt; bool:\n    \"\"\"Process a payment transaction.\"\"\"\n    # Payment processing logic\n    return True\n</code></pre> <p> By convention, Playbook names are PascalCase. While Python functions are typically named using snake_case, we suggest using PascalCase for Python playbook names.</p>"},{"location":"playbooks-language/#3-markdown-playbooks","title":"3. Markdown Playbooks","text":"<p>Markdown playbooks are defined using second-level headings (<code>##</code>) followed by the playbook name and an optional description:</p> <pre><code>## GreetCustomer\nThis playbook greets the customer and collects their basic information.\n</code></pre> <p>Playbooks can accept parameters:</p> <pre><code>## CalculateDiscount($total, $membership_level)\nThis playbook calculates the appropriate discount based on the total and membership level.\n</code></pre>"},{"location":"playbooks-language/#4-triggers","title":"4. Triggers","text":"<p>Triggers define when a playbook should execute. They're specified in a section marked by a <code>### Triggers</code> heading. The playbook will execute when any of the triggers are met.</p> <pre><code>### Triggers\n- At the beginning\n- When user provides their name\n- When $order_total exceeds 100\n</code></pre>"},{"location":"playbooks-language/#5-steps","title":"5. Steps","text":"<p>Steps define the actual logic of a playbook, specified in a section marked by a <code>### Steps</code> heading:</p> <pre><code>### Steps\n- Greet the user and ask for their $age\n- If $age is less than 68\n  - Tell the user about retirement products\n- Otherwise\n  - Tell the user about investment products\n- End program\n</code></pre> <p>Steps support:</p> <ul> <li>Imperative instructions (e.g., <code>Greet the user</code>)</li> <li>Variable assignments (e.g., <code>$total = $price * $quantity</code>, <code>Extract $relevant_info from search results</code>)</li> <li>Conditionals (e.g., <code>If $status is 'approved'</code>, <code>If user is not satisfied with the answer</code>)</li> <li>Loops (e.g., <code>While conversation is active</code>, <code>While $attempts &lt; 3</code>, <code>For each $product</code>)</li> <li>Playbook calls (e.g., <code>ProcessPayment($amount)</code> <code>Calculate discount on $total</code>)</li> <li>Control flow (e.g., <code>End program</code>, <code>Return $result</code>)</li> </ul> <p> When no steps are provided for a markdown playbook, the runtime treats the playbook's description as a ReAct-style prompt.</p>"},{"location":"playbooks-language/#6-notes","title":"6. Notes","text":"<p>The <code>### Notes</code> section can provide additional guidance or rules for the playbook:</p> <pre><code>### Notes\n- Maintain a professional tone throughout the conversation\n- If the user mentions a competitor, highlight our unique advantages\n- If the user is from California, mention that we're compliant with CCPA\n</code></pre>"},{"location":"playbooks-language/#variable-usage","title":"Variable Usage","text":"<p>Variables in Playbooks are denoted with a <code>$</code> prefix:</p> <pre><code>- $total = $price * $quantity\n- Tell the user their $total\n</code></pre> <p>Variables can store:</p> <ul> <li>Strings</li> <li>Numbers</li> <li>Booleans</li> <li>Lists</li> <li>Dictionaries</li> <li>Null values</li> </ul>"},{"location":"playbooks-language/#example-complete-playbooks-program","title":"Example: Complete Playbooks program","text":"<p>Here's a complete example of a simple playbooks program:</p> <pre><code># CustomerSupportAgent\nThis agent handles customer support inquiries.\n\n```python\n@playbook(triggers=[\"When user provides order number\"])\nasync def ValidateOrderNumber(order_number: str) -&gt; bool:\n    \"\"\"Validate that an order number is in the correct format.\"\"\"\n    import re\n    pattern = r\"^ORD-\\d{6}$\"\n    return bool(re.match(pattern, order_number))\n```\n\n## OrderStatus\nThis playbook helps customers check their order status.\n\n### Triggers\n- When user asks about order status\n\n### Steps\n- Greet the user and ask for their order number\n- If order number is not valid\n  - Tell the user their order number is invalid\n  - Ask the user to provide a valid order number in the format ORD-XXXXXX\n  - If order number is still not valid\n    - Apologize and offer to connect them with a human agent\n    - End program\n- $order_details = LookUpOrder($order_number)\n- Tell the user the current status of their order\n- Ask if they need any additional assistance\n\n### Notes\n- If the user becomes frustrated, offer to connect them with a human agent\n- Always thank the user for their patience\n```\n</code></pre>"},{"location":"playbooks-language/#next-steps","title":"Next Steps","text":"<ul> <li>Intermediate Representation - How playbooks are transpiled for execution</li> </ul>"},{"location":"playbooks-language/intermediate-representation/","title":"Intermediate Representation","text":"<p>The Playbooks Language is designed to be human-readable, but to execute it reliably, the system transpiles it into an Intermediate Representation (IR) format. This IR serves as a bridge between the natural language programming model and the execution engine.</p>"},{"location":"playbooks-language/intermediate-representation/#purpose-of-the-intermediate-representation","title":"Purpose of the Intermediate Representation","text":"<p>The Intermediate Representation:</p> <ul> <li>Standardizes playbooks for consistent execution</li> <li>Preserves the semantics of the original playbooks</li> <li>Enables precise tracking of execution state</li> <li>Facilitates programmatic analysis and validation</li> <li>Allows for more efficient runtime processing</li> </ul>"},{"location":"playbooks-language/intermediate-representation/#structure-of-the-intermediate-format","title":"Structure of the Intermediate Format","text":"<p>When a Playbooks program is transpiled, it follows a structured format:</p> <pre><code># &lt;AgentName&gt;\n&lt;Agent description&gt;\n\n```python\n@playbook and other functions\n```\n\n## &lt;PlaybookName&gt;(&lt;params&gt;) -&gt; &lt;returnVar | None&gt;\n&lt;Playbook description&gt;\n### Triggers\nT&lt;n&gt;:&lt;BGN|CND|EVT&gt; &lt;trigger text&gt;\n### Steps\n01:&lt;CMD&gt; ...  # two-digit numbering; dot-notation for sub-steps\n... more steps ...\n### Notes\nN&lt;n&gt; &lt;text&gt;\n</code></pre>"},{"location":"playbooks-language/intermediate-representation/#trigger-representation","title":"Trigger Representation","text":"<p>Triggers are standardized with specific codes:</p> Code Meaning Description BGN Beginning Trigger at the beginning of program execution CND Conditional Trigger when a condition is met EVT Event Trigger when an external event occurs <p>Each trigger is numbered sequentially (<code>T1</code>, <code>T2</code>, etc.) for reference during execution.</p>"},{"location":"playbooks-language/intermediate-representation/#command-codes","title":"Command Codes","text":"<p>Each step in the intermediate format is assigned a three-letter command code that defines its purpose:</p> Code Meaning Description EXE Execute Perform an imperative action or assignment QUE Queue Queue a playbook or function call for execution TNK Think Think deeply step by step before continuing CND Condition Represent an <code>if</code>, <code>else</code>, <code>while</code>, or <code>for</code> condition CHK Check Apply a note or rule to the current context RET Return Return from the current playbook JMP Jump Jump to another step in the playbook YLD Yield Yield control, with different targets: user, call, return, exit"},{"location":"playbooks-language/intermediate-representation/#line-numbering","title":"Line Numbering","text":"<p>The intermediate format uses a precise line numbering system:</p> <ul> <li>Top-level steps use two-digit numbers: <code>01</code>, <code>02</code>, <code>03</code>, etc.</li> <li>Sub-steps use dot notation: <code>01.01</code>, <code>01.02</code>, etc.</li> <li>Nested sub-steps add another level: <code>01.01.01</code>, etc.</li> </ul> <p>For example, an if-condition with nested steps would be represented as:</p> <pre><code>03:CND If $total &gt; 100\n  03.01:EXE Apply $discount of 10%\n  03.02:QUE Tell the user they received a discount\n04:EXE Continue with checkout\n</code></pre>"},{"location":"playbooks-language/intermediate-representation/#transformation-from-playbooks-language-to-intermediate-format","title":"Transformation from Playbooks Language to Intermediate Format","text":"<ul> <li>Agent names are converted to CamelCase without spaces: <code>CustomerService</code> instead of <code>Customer Service</code></li> <li>Playbook names are also converted to CamelCase without spaces: <code>Greeting</code> instead of <code>Greet the user</code></li> <li>Parameters are preserved with their <code>$</code> prefix</li> <li>Return values are explicitly declared in the playbook header</li> <li>Documentation is added if missing or incomplete</li> <li>Composite steps are expanded into individual steps</li> <li>Checks for notes are added as <code>CHK</code> steps at appropriate places</li> </ul>"},{"location":"playbooks-language/intermediate-representation/#example-transformation","title":"Example Transformation","text":"<p>Here's an example of how a simple markdown playbook is transformed to the intermediate format:</p>"},{"location":"playbooks-language/intermediate-representation/#original-markdown","title":"Original Markdown","text":"<pre><code># Customer Support\n\n## Greeting\nThis playbook greets the user and asks for their order number.\n\n### Triggers\n- At the beginning\n\n### Steps\n- Greet the user and ask for their order number\n- If user provides an invalid order number\n  - Ask them to try again\n- Look up order status\n- Tell the user their order status\n\n### Notes\n- Be polite and professional\n</code></pre>"},{"location":"playbooks-language/intermediate-representation/#transformed-intermediate-format","title":"Transformed Intermediate Format","text":"<pre><code># CustomerSupport\nThis agent provides customer support services, helping users track orders and resolve issues.\n\n## Greeting() -&gt; None\nThis playbook greets the user and asks for their order number.\n### Triggers\nT1:BGN At the beginning\n### Steps\n01:QUE Greet the user and ask for their order number\n02:YLD user\n03:CND If user provides an invalid order number\n  03.01:QUE Ask them to try again\n  03.02:YLD user\n  03.03:JMP 03 to check again\n04:QUE Look up order status\n05:QUE Tell the user their order status\n06:RET\n### Notes\nN1 Be polite and professional\n</code></pre>"},{"location":"playbooks-language/intermediate-representation/#benefits-of-the-intermediate-format","title":"Benefits of the Intermediate Format","text":"<ol> <li>Standardization: Consistent representation regardless of the original playbook style</li> <li>Clarity: Explicit indication of step types and control flow</li> <li>Debugging: Easier to track execution and identify issues</li> <li>Optimization: Better performance through structured representation</li> <li>Interoperability: Enables different execution engines and integrations</li> </ol>"},{"location":"playbooks-language/intermediate-representation/#learn-more","title":"Learn More","text":"<p>Explore different types of playbooks:</p> <ul> <li>Markdown Playbooks - How to write playbooks in markdown</li> <li>ReAct Playbooks - How to write playbooks in ReAct</li> <li>Python Playbooks - Using Python functions as playbooks </li> </ul>"},{"location":"triggers/","title":"Triggers","text":"<p>Triggers are a powerful feature in Playbooks AI that enable declarative event-driven programming through natural language conditions. They allow playbooks to be dynamically invoked when specified conditions are met.</p>"},{"location":"triggers/#what-are-triggers","title":"What are Triggers?","text":"<p>Triggers are conditions written in natural language that, when met, cause a playbook to be executed. They enable reactive and event-driven behavior in your AI agents.</p>"},{"location":"triggers/#benefits-of-triggers","title":"Benefits of Triggers","text":"<p>Triggers provide several advantages:</p> <ul> <li>Reactive Programming: Build systems that respond to events without polling</li> <li>Separation of Concerns: Organize code around events rather than control flow</li> <li>Natural Language Expressiveness: Specify complex conditions in plain language</li> <li>Reduced Complexity: Avoid complex if-else chains and state management</li> <li>Event-Driven Architecture: Create loosely coupled components that interact through events </li> </ul>"},{"location":"triggers/#next-steps","title":"Next Steps","text":"<ul> <li>See Adding Triggers tutorial</li> <li>See Advanced Triggers tutorial</li> <li>Refer to tutorials for other topics</li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Welcome to the Playbooks AI tutorials. These step-by-step guides will help you learn how to use Playbooks AI to build intelligent agents by introducing one concept at a time.</p>"},{"location":"tutorials/#getting-started","title":"Getting Started","text":"<p>If you haven't installed Playbooks AI yet, follow the installation guide and then the quickstart guide to set up your environment.</p>"},{"location":"tutorials/#tutorial-sequence","title":"Tutorial Sequence","text":"<p>These tutorials are designed to be followed in order, with each one building on concepts introduced in previous tutorials:</p> <ol> <li>Anatomy of a Playbook - Understand the structure and components of a basic playbook</li> <li>Adding Triggers - Learn how to use triggers to control when playbooks execute</li> <li>User Interaction - Handle user input and responses</li> <li>Calling Playbooks - Call one playbook from another</li> <li>Python Playbooks - Create playbooks using Python code</li> <li>Advanced Triggers - Explore more advanced triggers for validation, sentiment, and error handling</li> <li>Multi-Agent Programming - Create programs with multiple agents</li> <li>Working with Artifacts - Store and retrieve data using artifacts</li> </ol>"},{"location":"tutorials/#key-concepts-coverage","title":"Key Concepts Coverage","text":"<p>Throughout these tutorials, you'll explore these key Playbooks AI concepts:</p> <ul> <li>Markdown Playbooks - Writing playbooks in natural language</li> <li>Python Playbooks - Writing playbooks with Python code</li> <li>Triggers - Controlling when playbooks execute</li> <li>Variables - Storing and manipulating data</li> <li>User Interaction - Creating conversational flows</li> <li>Multi-Agent Systems - Building systems with specialized agents</li> <li>Artifacts - Managing persistent data</li> </ul> <p>Ready to get started? Begin with Anatomy of a Playbook!</p>"},{"location":"tutorials/adding-triggers/","title":"Adding Triggers","text":"<p>In this tutorial, you'll learn how to use triggers to control when your playbooks execute.</p>"},{"location":"tutorials/adding-triggers/#objective","title":"Objective","text":"<p>By the end of this tutorial, you'll understand: - What triggers are and why they're useful - How to define different types of triggers in your playbooks - How to execute playbooks conditionally using triggers</p>"},{"location":"tutorials/adding-triggers/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completion of Anatomy of a Playbook</li> <li>A basic understanding of playbook structure</li> </ul>"},{"location":"tutorials/adding-triggers/#what-are-triggers","title":"What Are Triggers?","text":"<p>Triggers are conditions that determine when a playbook should execute. They enable semantic event-driven programming. Rather than relying on complex if-else statements, you can define in plain English when your playbook should run.</p>"},{"location":"tutorials/adding-triggers/#types-of-triggers","title":"Types of Triggers","text":"<p>Playbooks AI supports several types of triggers:</p>"},{"location":"tutorials/adding-triggers/#1-temporal-triggers","title":"1. Temporal Triggers","text":"<p>Temporal triggers execute playbooks at specific times or moments:</p> <pre><code>### Triggers\n- At the beginning\n\n### Triggers\n- When the program ends\n</code></pre>"},{"location":"tutorials/adding-triggers/#2-state-based-triggers","title":"2. State-Based Triggers","text":"<p>State-based triggers execute playbooks when variables reach certain states or values:</p> <pre><code>### Triggers\n- When $x becomes larger than 15\n- When $account_balance is negative\n</code></pre>"},{"location":"tutorials/adding-triggers/#3-execution-flow-triggers","title":"3. Execution Flow Triggers","text":"<p>Execution flow triggers execute playbooks before, during, or after other playbooks:</p> <pre><code>### Triggers\n- After calling LoadAccount\n- Before calling ProcessPayment\n</code></pre>"},{"location":"tutorials/adding-triggers/#4-user-interaction-triggers","title":"4. User Interaction Triggers","text":"<p>User interaction triggers execute playbooks in response to user actions:</p> <pre><code>### Triggers\n- When user provides a PIN\n- When user wants to know the account balance\n</code></pre>"},{"location":"tutorials/adding-triggers/#example-using-multiple-types-of-triggers","title":"Example: Using Multiple Types of Triggers","text":"<p>Let's create a more complex example that uses different types of triggers:</p> <pre><code># Account Management\nThis program demonstrates various types of triggers.\n\n## Main\n### Triggers\n- At the beginning\n### Steps\n- Ask user for a PIN\n- Ask user for email\n- $x = 10\n- Load user account\n- $x = $x * 2\n- Tell the user their account balance\n\n## LoadAccount($email, $pin)\n### Steps\n- Return {\"balance\": 8999}\n\n## Validation\n### Triggers\n- When user provides a PIN\n### Steps\n- While PIN is not 4 digits\n  - Tell user PIN is not valid and ask for PIN again\n  - If the user gives up\n    - Apologize and end the conversation\n- Return PIN\n\n## TooBig\n### Triggers\n- When $x &gt; 15\n### Steps\n- Tell user $x is too big\n\n## AccountLoaded\n### Triggers\n- After calling LoadAccount\n### Steps\n- Tell user that you have loaded their account\n</code></pre> <p>In this example:</p> <ol> <li>The <code>Main</code> playbook runs at the beginning</li> <li>When the user provides a PIN, the <code>Validation</code> playbook runs to verify it</li> <li>When the variable <code>$x</code> becomes greater than 15, the <code>TooBig</code> playbook runs</li> <li>After the <code>LoadAccount</code> playbook is called, the <code>AccountLoaded</code> playbook runs</li> </ol>"},{"location":"tutorials/adding-triggers/#creating-a-playbook-with-triggers","title":"Creating a Playbook with Triggers","text":"<p>Let's create a simpler version that demonstrates triggers:</p> <ol> <li>Create a new file named <code>triggers-demo.md</code> with the following content:</li> </ol> <pre><code># Trigger Demo\nThis program demonstrates different types of triggers.\n\n## Main\n### Triggers\n- At the beginning\n### Steps\n- Tell the user this is a trigger demonstration\n- $counter = 5\n- Ask the user to provide a number\n- $counter = $counter * 2\n- Tell the user that the counter is now $counter\n- End program\n\n## BigNumber\n### Triggers\n- When $counter &gt; 15\n### Steps\n- Tell the user that the counter has exceeded 15\n- Tell the user that this message was triggered automatically\n</code></pre> <ol> <li>Run your playbook:</li> </ol> <pre><code>python -m playbooks.applications.agent_chat triggers-demo.md --verbose\n</code></pre> <ol> <li>When you run this program and enter a value, you should notice:</li> <li>The <code>Main</code> playbook executes at the start</li> <li>If your inputs cause <code>$counter</code> to exceed 15, the <code>BigNumber</code> playbook executes automatically</li> </ol>"},{"location":"tutorials/adding-triggers/#how-triggers-work","title":"How Triggers Work","text":"<p>When you run a Playbooks AI program:</p> <ol> <li>The framework monitors the program state, including variables, user inputs, and execution flow</li> <li>When a state change occurs (e.g., a variable is updated) or a step is executed, the framework checks all trigger conditions</li> <li>If any trigger conditions are met, the corresponding playbooks are queued for execution</li> <li>Triggered playbooks execute after the current step completes</li> </ol>"},{"location":"tutorials/adding-triggers/#best-practices-for-using-triggers","title":"Best Practices for Using Triggers","text":"<ul> <li>Use clear and specific trigger conditions</li> <li>Avoid trigger loops where playbooks could trigger each other indefinitely</li> <li>Use state-based triggers (<code>When $x &gt; 15</code>) to handle exceptions rather than checking conditions in steps so that the main playbook does not become too complex</li> <li>Consider the execution order when using multiple triggers</li> </ul>"},{"location":"tutorials/adding-triggers/#advanced-trigger-patterns","title":"Advanced Trigger Patterns","text":""},{"location":"tutorials/adding-triggers/#chaining-triggers","title":"Chaining Triggers","text":"<p>You can create chains of triggers where one playbook triggers another:</p> <pre><code>## Step1\n### Triggers\n- At the beginning\n### Steps\n- $x = 10\n\n## Step2\n### Triggers\n- When $x becomes 10\n### Steps\n- $y = 20\n\n## Step3\n### Triggers\n- When $y becomes 20\n### Steps\n- Tell the user the chain is complete\n</code></pre>"},{"location":"tutorials/adding-triggers/#combining-trigger-conditions","title":"Combining Trigger Conditions","text":"<p>You can use multiple trigger conditions for a single playbook:</p> <pre><code>## EmergencyAlert\n### Triggers\n- When $temperature &gt; 90\n- When $pressure &lt; 30\n- When user reports an emergency\n### Steps\n- Alert the maintenance team\n</code></pre>"},{"location":"tutorials/adding-triggers/#triggering-multiple-playbooks","title":"Triggering Multiple Playbooks","text":"<p>Multiple playbooks can be triggered by the same condition, creating a fan-out pattern where a single event causes multiple playbooks to execute:</p> <pre><code>## UpdateInventory\n### Triggers\n- When an item is purchased\n### Steps\n- Reduce the inventory count for the purchased item\n- If inventory is below reorder threshold\n  - Flag item for reordering\n\n## NotifyShipping\n### Triggers\n- When an item is purchased\n### Steps\n- Create a shipping label\n- Notify the warehouse to prepare the package\n\n## RecordSale\n### Triggers\n- When an item is purchased\n### Steps\n- Record the sale details in the accounting system\n- Update sales analytics dashboard\n</code></pre> <p>In this example, when an item is purchased:</p> <ol> <li><code>UpdateInventory</code> executes to adjust inventory counts</li> <li><code>NotifyShipping</code> executes to start the shipping process</li> <li><code>RecordSale</code> executes to record financial details</li> </ol> <p>This pattern allows you to:</p> <ul> <li>Separate concerns into distinct playbooks</li> <li>Add new behaviors without modifying existing playbooks</li> <li>Create modular, maintainable event-driven systems</li> </ul> <p>Caution! The framework does not guarantee the order of execution of triggered playbooks, so those playbooks should be independent of each other.</p>"},{"location":"tutorials/adding-triggers/#exercises","title":"Exercises","text":"<ol> <li>Modify the trigger demo to add a new playbook that triggers when the user enters a specific word</li> <li>Create a playbook with multiple trigger conditions</li> <li>Create a chain of three playbooks that trigger each other in sequence</li> </ol>"},{"location":"tutorials/adding-triggers/#next-steps","title":"Next Steps","text":"<p>Now that you understand how to use triggers, you're ready to learn about User Interaction in Playbooks AI. </p>"},{"location":"tutorials/anatomy-of-a-playbook/","title":"Anatomy of a Playbook","text":"<p>In this tutorial, you'll learn about the structure of a basic Playbooks AI program and understand the components that make up a playbook.</p>"},{"location":"tutorials/anatomy-of-a-playbook/#objective","title":"Objective","text":"<p>By the end of this tutorial, you'll understand:</p> <ul> <li>The basic structure of a markdown playbook</li> <li>How to define a playbook with steps</li> <li>How triggers control playbook execution</li> <li>How to create and run a simple \"Hello World\" playbook</li> </ul>"},{"location":"tutorials/anatomy-of-a-playbook/#prerequisites","title":"Prerequisites","text":"<ul> <li>Playbooks AI installed</li> <li>Basic familiarity with markdown</li> </ul>"},{"location":"tutorials/anatomy-of-a-playbook/#the-structure-of-a-playbook","title":"The Structure of a Playbook","text":"<p>A Playbooks AI program consists of one or more playbooks written in markdown format. Let's break down the structure of a basic \"Hello World\" playbook:</p> <pre><code># Hello world\nThis is a hello world demo for the playbooks system\n\n## Hello world demo\nThis playbooks demo prints a hello playbooks message\n\n### Triggers\n- At the beginning\n\n### Steps\n- Greet the user with a hello playbooks message\n- Tell the user that this is a demo for the playbooks system\n- Say goodbye to the user\n- End program\n</code></pre> <p>Let's examine each part:</p>"},{"location":"tutorials/anatomy-of-a-playbook/#1-program-title-and-description","title":"1. Program Title and Description","text":"<pre><code># Hello world\nThis is a hello world demo for the playbooks system\n</code></pre> <ul> <li>The top-level heading (<code>#</code>) defines the program title</li> <li>The text immediately following defines the program description</li> </ul>"},{"location":"tutorials/anatomy-of-a-playbook/#2-playbook-definition","title":"2. Playbook Definition","text":"<pre><code>## Hello world demo\nThis playbooks demo prints a hello playbooks message\n</code></pre> <ul> <li>Second-level headings (<code>##</code>) define individual playbooks within the program</li> <li>The text immediately following describes what this playbook does</li> </ul>"},{"location":"tutorials/anatomy-of-a-playbook/#3-triggers-section","title":"3. Triggers Section","text":"<pre><code>### Triggers\n- At the beginning\n</code></pre> <ul> <li>The \"Triggers\" section (denoted by <code>### Triggers</code>) defines when this playbook should execute</li> <li>In this example, <code>At the beginning</code> means this playbook will run as soon as the program starts</li> </ul>"},{"location":"tutorials/anatomy-of-a-playbook/#4-steps-section","title":"4. Steps Section","text":"<pre><code>### Steps\n- Greet the user with a hello playbooks message\n- Tell the user that this is a demo for the playbooks system\n- Say goodbye to the user\n- End program\n</code></pre> <ul> <li>The \"Steps\" section (denoted by <code>### Steps</code>) defines what the playbook should do</li> <li>Each bullet point (<code>-</code>) represents a discrete step in natural language</li> <li>Steps are executed in the order they are listed</li> <li>The last step <code>End program</code> terminates the program execution</li> </ul>"},{"location":"tutorials/anatomy-of-a-playbook/#creating-your-first-playbook","title":"Creating Your First Playbook","text":"<p>Let's create your first playbook:</p> <ol> <li>Create a new file named <code>hello.md</code> with the following content:</li> </ol> <pre><code># Hello world\nThis is a hello world demo for the playbooks system\n\n## Hello world demo\nThis playbooks demo prints a hello playbooks message\n\n### Triggers\n- At the beginning\n\n### Steps\n- Greet the user with a hello playbooks message\n- Tell the user that this is a demo for the playbooks system\n- Say goodbye to the user\n- End program\n</code></pre> <ol> <li>Run your playbook:</li> </ol> <pre><code>python -m playbooks.applications.agent_chat hello.md --verbose\n</code></pre> <ol> <li>You should see output similar to:</li> </ol> <pre><code>Loading playbooks from: ['hello.md']\nTranspiled playbook content\n\n\u256d\u2500 HelloWorld \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Hello! Welcome to Playbooks AI!                                \u2502\n\u2502                                                                \u2502\n\u2502 This is a demonstration of the Playbooks system, which allows  \u2502\n\u2502 you to create AI agents using natural language programming.    \u2502\n\u2502                                                                \u2502\n\u2502 Thank you for trying out this demo. Goodbye!                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nExecution finished. Exiting...\n</code></pre>"},{"location":"tutorials/anatomy-of-a-playbook/#understanding-the-execution","title":"Understanding the Execution","text":"<p>When you run the playbook:</p> <ol> <li>The Playbooks AI framework loads and parses your markdown file</li> <li>It transpiles the natural language into an executable format</li> <li>It identifies playbooks with triggers that match the current state (in this case, \"At the beginning\")</li> <li>It executes the steps in order, generating appropriate responses for each step</li> <li>When it reaches the \"End program\" step, execution terminates</li> </ol>"},{"location":"tutorials/anatomy-of-a-playbook/#variables-in-playbooks","title":"Variables in Playbooks","text":"<p>Playbooks can also use variables to store and manipulate data. Variables are denoted with a <code>$</code> prefix. We'll explore variables in more detail in later tutorials.</p>"},{"location":"tutorials/anatomy-of-a-playbook/#best-practices","title":"Best Practices","text":"<p>When creating playbooks:</p> <ul> <li>Give your playbooks descriptive titles that explain their purpose</li> <li>Break complex processes into multiple playbooks with clear responsibilities</li> <li>Use clear, concise natural language for your steps</li> <li>Use triggers to control when playbooks execute</li> <li>End your program explicitly with the \"End program\" step</li> </ul>"},{"location":"tutorials/anatomy-of-a-playbook/#exercises","title":"Exercises","text":"<ol> <li>Modify the \"Hello World\" playbook to ask for the user's name and include it in the greeting</li> <li>Create a playbook that tells a short joke or story</li> <li>Try creating a playbook with multiple sets of steps and see what happens</li> </ol>"},{"location":"tutorials/anatomy-of-a-playbook/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basic structure of a playbook, you're ready to learn about Adding Triggers to control when your playbooks execute. </p>"},{"location":"tutorials/calling-playbooks/","title":"Calling Playbooks","text":"<p>In this tutorial, you'll learn how to call one playbook from another to create modular, reusable components.</p>"},{"location":"tutorials/calling-playbooks/#objective","title":"Objective","text":"<p>By the end of this tutorial, you'll understand:</p> <ul> <li>How to define playbooks that accept parameters</li> <li>How to call one playbook from another</li> <li>How to capture and use return values from playbooks</li> <li>How to create modular, reusable playbook components</li> </ul>"},{"location":"tutorials/calling-playbooks/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completion of User Interaction</li> <li>Understanding of variables in playbooks</li> </ul>"},{"location":"tutorials/calling-playbooks/#why-call-playbooks","title":"Why Call Playbooks?","text":"<p> Each playbook is equivalent to a function.</p> <p>Calling playbooks allows you to:</p> <ul> <li>Break complex processes into smaller, reusable components</li> <li>Create libraries of common functionality</li> <li>Improve readability and maintainability</li> <li>Enable more complex logic through composition</li> </ul>"},{"location":"tutorials/calling-playbooks/#defining-playbooks","title":"Defining Playbooks","text":""},{"location":"tutorials/calling-playbooks/#with-explicit-parameters","title":"With Explicit Parameters","text":"<p>To create a reusable playbook, you can define it with parameters:</p> <pre><code>## Greeting($name)\nGreet the user by welcoming them to the service\n### Steps\n- Say \"Hello, $name! Welcome to our service.\"\n</code></pre>"},{"location":"tutorials/calling-playbooks/#with-implicit-parameters","title":"With Implicit Parameters","text":"<p> A playbook has access to all state variables.</p> <pre><code>## Greeting\nGreet the user by welcoming them to the service\n### Steps\n- Say \"Hello, $name! Welcome to our service.\"\n</code></pre> <p>This playbook does not specify a parameter. It can still use the <code>$name</code> variable if it is set previously, say from the calling playbook.</p>"},{"location":"tutorials/calling-playbooks/#calling-a-playbook","title":"Calling a Playbook","text":""},{"location":"tutorials/calling-playbooks/#like-a-python-function","title":"Like a Python Function","text":"<p>You can call a playbook from another playbook like a python function call:</p> <pre><code>## Main\n### Triggers\n- At the beginning\n### Steps\n- Ask the user for their $user_name and $city\n- Greeting($user_name, city=$city, age=50, state=\"WA\")\n- End program\n</code></pre> <p> It is OK to deviate from standard Python syntax.</p> <p>For example, the following is also valid Playbooks code:</p> <pre><code>- Greeting($user_name, city=$city, age=50, state=two letter state code where Seattle is located)\n</code></pre> <p>The Playbooks runtime will automatically convert <code>state=two letter state code where Seattle is located</code> to <code>state=\"WA\"</code>!</p>"},{"location":"tutorials/calling-playbooks/#implicitly","title":"Implicitly","text":"<p>You can also call a playbook implicitly:</p> <pre><code>## Main\n### Triggers\n- At the beginning\n### Steps\n- Ask the user for their $name\n- Greet the user using their $name\n- End program\n</code></pre> <p> Playbooks runtime can infer which playbook to call based on the description of the playbook and current context.</p> <p>Note that Playbooks runtime will interpret \"Greet the user\" as a call to the <code>Greeting</code> playbook based on the description of the playbook <code>Greet the user by welcoming them to the service</code>. It will also automatically pass the <code>$name</code> variable to the <code>Greeting</code> playbook based on the signature of the playbook.</p>"},{"location":"tutorials/calling-playbooks/#capturing-return-values","title":"Capturing Return Values","text":""},{"location":"tutorials/calling-playbooks/#with-a-python-like-syntax","title":"With a Python-like Syntax","text":"<p>Playbooks can return values that can be captured and used by the calling playbook:</p> <pre><code>## CalculateTotal($price, $quantity)\nCalculates the total bill amount from the price and quantity\n\n### Steps\n- $total = $price * $quantity\n- Return $total\n\n## OrderProcess\n### Triggers\n- At the beginning\n### Steps\n- Ask the user for the item $price\n- Ask the user for the $quantity\n- $bill_amount = CalculateTotal($price, $quantity)\n- Tell user that their total bill is $bill_amount\n- End program\n</code></pre>"},{"location":"tutorials/calling-playbooks/#implicitly_1","title":"Implicitly","text":"<p>If you don't need the returned value beyond a yield point, do not capture it explicitly. For example,</p> <pre><code>- Get total bill amount from CalculateTotal($price, $quantity)\n- Tell user what their total bill is\n</code></pre>"},{"location":"tutorials/calling-playbooks/#fully-semantic-calls","title":"Fully Semantic Calls","text":"<p>Combined with semantic playbook calls with implicit parameters and return values, this can also be expressed as:</p> <pre><code>- Calculate total bill amount\n- Tell user what their total bill is\n</code></pre> <p> This is the preferred way to author playbooks, because it is more readable and easier to maintain.</p>"},{"location":"tutorials/calling-playbooks/#a-practical-example-country-facts","title":"A Practical Example: Country Facts","text":"<p>Let's create a more complex example that demonstrates both parameters and return values:</p> <pre><code># Facts about nearby countries\nThis program prints interesting facts about nearby countries\n\n## GetCountryFact($country)\n### Steps\n- Return an unusual historical fact about $country\n\n## Main\n### Triggers\n- At the beginning\n### Steps\n- Ask user what $country they are from\n- List 5 $countries near $country\n- Tell the user that here are 5 nearby countries to the one they are from\n- Inform the user that you will now tell them some interesting facts about each of the countries\n- For each $country in $countries\n  - $fact = GetCountryFact($country)\n  - Tell the user: \"$country: $fact\"\n- End program\n</code></pre> <p>In this example:</p> <ul> <li><code>GetCountryFact</code> takes a country name and returns a fact about it</li> <li><code>Main</code> calls <code>GetCountryFact</code> for each country in a list</li> <li>The return value is stored and used in the response</li> </ul>"},{"location":"tutorials/calling-playbooks/#exercises","title":"Exercises","text":"<ol> <li>Create a program with playbooks that process a shopping cart (add items, calculate total, apply discounts)</li> <li>Create a playbook to implement tic-tac-toe</li> </ol>"},{"location":"tutorials/calling-playbooks/#next-steps","title":"Next Steps","text":"<p>Now that you know how to call playbooks from markdown, it's time to learn about Python Playbooks for more advanced functionality. </p>"},{"location":"tutorials/multi-agent-programming/","title":"Multi-Agent Programming","text":"<p>In this tutorial, you'll learn how to create and orchestrate systems with multiple agents.</p>"},{"location":"tutorials/multi-agent-programming/#objective","title":"Objective","text":"<p>By the end of this tutorial, you'll understand:</p> <ul> <li>How to define multiple agents in a program</li> <li>How to make playbooks public for use by other agents</li> </ul>"},{"location":"tutorials/multi-agent-programming/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completion of Advanced Triggers</li> <li>Understanding of Python Playbooks</li> <li>Familiarity with Exported and Public Playbooks</li> </ul>"},{"location":"tutorials/multi-agent-programming/#multi-agent-architecture","title":"Multi-Agent Architecture","text":"<p>Playbooks AI allows you to create systems with multiple specialized agents that work together. This approach enables:</p> <ul> <li>Better separation of concerns</li> <li>Specialized capabilities for different aspects of your system</li> <li>More natural modeling of complex domains</li> <li>Scalable architectures for larger applications</li> <li>Emergent behavior from the interaction of the agents</li> <li>Using external agents, potentially built using other frameworks</li> </ul>"},{"location":"tutorials/multi-agent-programming/#defining-multiple-agents","title":"Defining Multiple Agents","text":"<p>A multi-agent Playbooks program defines multiple agents using separate sections:</p> <pre><code># Order Management Agent\nThis agent handles customer inquiries about orders\n\n## Order Status Inquiry\n### Triggers\n- When user wants to know the status of an order\n### Steps\n- ...\n\n# Billing Agent\nThis agent helps with billing inquiries\n\n## Update Credit Card Request\n### Triggers\n- When user wants to update their credit card on file\n### Steps\n- ...\n</code></pre> <p>Each agent is defined by a top-level heading (<code>#</code>) followed by its playbooks.</p>"},{"location":"tutorials/multi-agent-programming/#public-playbooks","title":"Public Playbooks","text":"<p>Agents can call public playbooks from other agents.</p> <p> For more information on public playbooks, see Exported and Public Playbooks.</p>"},{"location":"tutorials/multi-agent-programming/#public-markdown-playbooks","title":"Public Markdown Playbooks","text":"<pre><code># Billing Agent\nThis agent helps with billing inquiries\n\n## public: UpdateCreditCardRequest\n### Triggers\n- When user wants to update their credit card on file\n### Steps\n- ...\n</code></pre> <p>The <code>public:</code> prefix in the playbook name makes it available to other agents in the system.</p>"},{"location":"tutorials/multi-agent-programming/#public-python-playbooks","title":"Public Python Playbooks","text":"<p>You can also make Python playbooks public using the <code>public=True</code> parameter:</p> <pre><code># Account Management Agent\nThis agent helps with account management\n\n```python\n@playbook(public=True)\nasync def LockAccount(account_id: str, auth_token: str, reason: str) -&gt; float:\n    \"\"\"Lock an account.\"\"\"\n    requests.post(\n        f\"https://api.playbooks.ai/v1/accounts/{account_id}/lock\",\n        headers={\"Authorization\": f\"Bearer {auth_token}\"},\n        json={\"reason\": reason},\n    )\n```\n</code></pre>"},{"location":"tutorials/multi-agent-programming/#calling-playbooks-from-other-agents","title":"Calling Playbooks from Other Agents","text":"<p> This is not yet implemented.</p> <p>Once playbooks are public, other agents can call them:</p>"},{"location":"tutorials/multi-agent-programming/#as-a-function-call","title":"As a Function Call","text":"<pre><code># BillingAgent\n\n## UpdateCreditCardRequest\n### Triggers\n- When user wants to update their credit card on file\n### Steps\n- ...\n- AccountManagementAgent.LockAccount($account_id, $auth_token, $reason)\n</code></pre> <p>In this example, the <code>BillingAgent</code> calls playbooks from the <code>AccountManagementAgent</code>.</p>"},{"location":"tutorials/multi-agent-programming/#implicit-call","title":"Implicit Call","text":"<pre><code>- Ask account management agent to lock the account\n</code></pre>"},{"location":"tutorials/multi-agent-programming/#triggering-playbooks-across-agents","title":"Triggering Playbooks Across Agents","text":"<p> This is not yet implemented.</p> <p>If public playbooks have triggers defined on them, those playbooks will be triggered automatically when the trigger event occurs.</p>"},{"location":"tutorials/multi-agent-programming/#message-passing-between-agents","title":"Message Passing Between Agents","text":"<p> This is not yet implemented.</p> <p>Agents can pass natural language messages with each other. This is useful for coordinating actions, negotiating, collaborating, and more.</p> <pre><code>- Ask vendor agent for a discount\n- While negotiation is in progress\n  - Wait for vendor agent to respond\n  - If the vendor made a counter offer\n    - Evaluate the counter offer\n    - ...\n- VendorAgent.ProcessOrder($quantity, price=negotiated price)\n</code></pre>"},{"location":"tutorials/multi-agent-programming/#exported-playbooks","title":"Exported Playbooks","text":"<p> This is not yet implemented.</p> <p> For more information on exported playbooks, see Exported and Public Playbooks.</p> <p>Agents can expose implementation of playbooks to other agents. The other agent can then execute the playbook as if it were their own.</p> <pre><code># AccountManagementAgent\nimport ProvisionAccount from VendorAgent\n\n## CreateAccount\n### Steps\n- ...\n- Provision user account\n</code></pre>"},{"location":"tutorials/multi-agent-programming/#best-practices-for-multi-agent-systems","title":"Best Practices for Multi-Agent Systems","text":"<ul> <li>Define clear responsibilities: Each agent should have a specific role</li> <li>Properly scope public playbooks: Only make playbooks public that need to be called by other agents</li> <li>Design for failure: Handle cases where an agent might not be available</li> <li>Consider security: Think about which agents should have access to which playbooks</li> <li>Document interfaces: Define clear interfaces between agents</li> </ul>"},{"location":"tutorials/multi-agent-programming/#exercises","title":"Exercises","text":"<ol> <li>Create a multi-agent system for a shopping application with specialized agents for product search, recommendations, and checkout</li> </ol>"},{"location":"tutorials/multi-agent-programming/#next-steps","title":"Next Steps","text":"<p>Now that you understand multi-agent programming, you're ready to learn about Working with Artifacts for managing large text blobs, images and other artifacts.</p>"},{"location":"tutorials/python-playbooks/","title":"Python Playbooks","text":"<p>In this tutorial, you'll learn how to create Python playbooks that can be used alongside markdown playbooks in your Playbooks AI programs.</p>"},{"location":"tutorials/python-playbooks/#objective","title":"Objective","text":"<p>By the end of this tutorial, you'll understand:</p> <ul> <li>How to define playbooks using Python code</li> <li>How to use the <code>@playbook</code> decorator</li> <li>How to pass parameters and return values</li> <li>How to add triggers to Python playbooks</li> </ul>"},{"location":"tutorials/python-playbooks/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completion of Calling Playbooks</li> <li>Basic Python programming knowledge</li> </ul>"},{"location":"tutorials/python-playbooks/#why-use-python-playbooks","title":"Why Use Python Playbooks?","text":"<p>While markdown playbooks are great for expressing workflows in natural language, Python playbooks allow you to:</p> <ul> <li>Implement complex logic and algorithms</li> <li>Integrate with external systems and APIs</li> <li>Process and transform data</li> <li>Perform calculations and validations</li> <li>Leverage existing Python libraries</li> </ul>"},{"location":"tutorials/python-playbooks/#creating-a-basic-python-playbook","title":"Creating a Basic Python Playbook","text":"<p>A Python playbook is a Python function decorated with the <code>@playbook</code> decorator:</p> <pre><code>@playbook\nasync def greeting(name: str) -&gt; str:\n    return f\"Hello, {name}! Welcome to Playbooks AI.\"\n</code></pre> <p>Key features:</p> <ul> <li>The <code>@playbook</code> decorator registers the function as a playbook</li> <li>Python playbooks must be async functions</li> <li>Parameter types and return types are specified using Python type hints</li> </ul> <p> Python playbooks are executed as Python code, so must be valid Python code.</p> <p>Python playbooks run in an isolated Python environment and can access all installed Python modules.</p>"},{"location":"tutorials/python-playbooks/#adding-python-playbooks-to-your-program","title":"Adding Python Playbooks to Your Program","text":"<p>Python playbooks are included within markdown playbooks using code blocks:</p> <pre><code># Python Demo\nThis program demonstrates Python playbooks.\n\n```python\n@playbook\nasync def greeting(name: str) -&gt; str:\n    return f\"Hello, {name}! Welcome to Playbooks AI.\"\n```\n\n## Main\n### Triggers\n- At the beginning\n### Steps\n- Ask the user for their name\n- $name = user's response\n- $message = greeting($name)\n- Tell the user: $message\n- End program\n</code></pre> <p>Notice that:</p> <ol> <li>The Python code is enclosed in a triple-backtick code block with the <code>python</code> language specifier</li> <li>The markdown playbook can call the Python playbook just like any other playbook</li> </ol>"},{"location":"tutorials/python-playbooks/#adding-triggers-to-python-playbooks","title":"Adding Triggers to Python Playbooks","text":"<p>You can add triggers to Python playbooks using the <code>triggers</code> parameter:</p> <pre><code>```python\nimport math\n\n@playbook(triggers=[\"When you want to apply magic operator to a number\"])\nasync def magic_operator(input: str) -&gt; float:\n    input_num = float(input)\n    return input_num * math.sin(input_num)\n```\n</code></pre> <p>This Python playbook will be triggered when the condition \"When you want to apply magic operator to a number\" is met.</p> <p> Triggers are evaluated after each line in markdown playbook is executed. They are NOT evaluated during a Python playbook's execution.</p>"},{"location":"tutorials/python-playbooks/#public-python-playbooks","title":"Public Python Playbooks","text":"<p>To make a Python playbook available to other agents, you can use the <code>public</code> parameter:</p> <pre><code>@playbook(public=True)\nasync def calculate_price(quantity: int, unit_price: float) -&gt; float:\n    return quantity * unit_price\n</code></pre> <p>Public playbooks can be called by other agents in a multi-agent system.</p>"},{"location":"tutorials/python-playbooks/#exercise","title":"Exercise","text":"<p>Consider the following Playbooks program:</p> <pre><code># Facts about nearby countries\nThis program prints interesting facts about nearby countries\n\n## GetCountryFact($country)\n### Steps\n- Return an unusual historical fact about $country\n\n## Main\n### Triggers\n- At the beginning\n### Steps\n- Ask user what $country they are from\n- List 5 $countries near $country\n- Tell the user that here are 5 nearby countries to the one they are from\n- Inform the user that you will now tell them some interesting facts about each of the countries\n- For each $country in $countries\n  - $fact = GetCountryFact($country)\n  - Tell the user: \"$country: $fact\"\n- End program\n</code></pre> <p>Notice that the <code>Main</code> playbook loops through the list of countries and calls the <code>GetCountryFact</code> playbook for each country.</p> <p>Let's use a Python playbook to execute the loop instead.</p> <pre><code># Facts about nearby countries\nThis program prints interesting facts about nearby countries\n\n```python\n@playbook\nasync def process_countries(countries: list[str]) -&gt; None:\n    \"\"\"\n    Process all countries and tell the user about them\n\n    Args:\n        countries: A list of countries to process\n    \"\"\"\n    for country in countries:\n        fact = await GetCountryFact(country)\n        await Say(f\"{country}: {fact}\")\n```\n\n## GetCountryFact($country)\n### Steps\n- Return an unusual historical fact about $country\n\n## Main\n### Triggers\n- At the beginning\n### Steps\n- Ask user what $country they are from\n- List 5 $countries near $country\n- Tell the user that here are 5 nearby countries to the one they are from\n- Inform the user that you will now tell them some interesting facts about each of the countries\n- Process all countries\n- End program\n</code></pre> <p>Notice that the <code>Main</code> playbook now calls the <code>process_countries</code> Python playbook with the list of countries. The <code>process_countries</code> playbook then calls the <code>GetCountryFact</code> markdown playbook for each country and a built-in <code>Say</code> playbook to tell the user about each country.</p> <p> You can call markdown playbooks from Python playbooks and vice versa.</p>"},{"location":"tutorials/python-playbooks/#best-practices-for-python-playbooks","title":"Best Practices for Python Playbooks","text":"<ul> <li>Use Python for complex logic and calculations</li> <li>Keep Python playbooks focused on a single task</li> <li>Handle errors gracefully with try/except blocks</li> <li>Use type hints to document parameters and return types</li> <li>Import only the libraries you need</li> <li>Document your Python playbooks with docstrings</li> </ul>"},{"location":"tutorials/python-playbooks/#using-docstrings","title":"Using Docstrings","text":"<p>Add documentation to your Python playbooks using docstrings:</p> <pre><code>```python\n@playbook\nasync def calculate_discount(price: float, discount_percent: float) -&gt; float:\n    \"\"\"\n    Calculates the final price after applying a discount.\n\n    Args:\n        price: The original price\n        discount_percent: The discount percentage (0-100)\n\n    Returns:\n        The final price after discount\n    \"\"\"\n    if not 0 &lt;= discount_percent &lt;= 100:\n        return(\"Discount percentage must be between 0 and 100\")\n\n    discount_amount = price * (discount_percent / 100)\n    return price - discount_amount\n```\n</code></pre>"},{"location":"tutorials/python-playbooks/#external-api-integration","title":"External API Integration","text":"<p>Python playbooks are perfect for integrating with external APIs:</p> <pre><code>```python\nimport requests\n\n@playbook\nasync def get_weather(city: str) -&gt; dict:\n    \"\"\"Get weather information for a city\"\"\"\n\n    api_key = os.environ.get(\"WEATHER_API_KEY\")\n    url = f\"https://api.weatherapi.com/v1/current.json?key={api_key}&amp;q={city}\"\n\n    response = requests.get(url)\n    response.raise_for_status()  # Raise exception for HTTP errors\n\n    return response.json()\n```\n</code></pre>"},{"location":"tutorials/python-playbooks/#next-steps","title":"Next Steps","text":"<p>Now that you know how to create Python playbooks, you're ready to learn about Advanced Triggers to see how to use more complex triggers to control the execution of your playbooks.</p>"},{"location":"tutorials/triggers-advanced/","title":"Advanced Triggers","text":"<p>In this tutorial, you'll explore more advanced trigger patterns and use cases in Playbooks AI.</p>"},{"location":"tutorials/triggers-advanced/#objective","title":"Objective","text":"<p>By the end of this tutorial, you'll understand:</p> <ul> <li>How to create complex data validation triggers</li> <li>How to use sentiment and intent-based triggers</li> <li>How to implement communication-based triggers</li> <li>How to build robust error handling with triggers</li> </ul>"},{"location":"tutorials/triggers-advanced/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completion of Basic Triggers</li> <li>Understanding of User Interaction</li> <li>Familiarity with Calling Playbooks</li> </ul>"},{"location":"tutorials/triggers-advanced/#data-validation-triggers","title":"Data Validation Triggers","text":"<p>One powerful application of triggers is data validation. You can create playbooks that automatically trigger when users provide certain types of data:</p> <pre><code>## Main\n### Triggers\n- At the beginning\n### Steps\n- Tell the user this is a banking system\n- Ask the user for their account number\n- Ask the user for their PIN\n- Load account information\n- ...\n\n## AccountNumberValidation\n### Triggers\n- When user provides an account number\n### Steps\n- While account number is not exactly 10 digits\n  - Tell the user their account number is invalid\n  - Ask the user to provide a valid 10-digit account number\n  - If the user wants to quit\n    - End program\n- Return the account number\n\n## PinValidation\n### Triggers\n- When user provides a PIN\n### Steps\n- While PIN is not exactly 4 digits\n  - Tell the user their PIN is invalid\n  - Ask the user to provide a valid 4-digit PIN\n  - If the user has made 3 failed attempts\n    - Lock user account\n    - Tell the user their account is locked\n    - End program\n- Return the PIN\n</code></pre> <p>This pattern:</p> <ul> <li>Separates validation logic from the main workflow</li> <li>Automatically triggers validation when specific data is provided</li> <li>Provides clear error messages and recovery paths</li> </ul>"},{"location":"tutorials/triggers-advanced/#sentiment-based-triggers","title":"Sentiment-Based Triggers","text":"<p>You can create triggers that respond to user sentiment, enabling more natural conversations:</p> <pre><code>## AngryCustomerResponse\n### Triggers\n- When user is frustrated or abusive\n### Steps\n- Apologize to the user for the frustration\n- Offer to connect them with a human support agent\n- Ask if they would like to continue or speak with a human\n- ...\n</code></pre> <p>This trigger activates when the system detects negative sentiment in the user's messages, allowing for empathetic responses at the right time.</p>"},{"location":"tutorials/triggers-advanced/#intent-based-triggers","title":"Intent-Based Triggers","text":"<p>Similar to sentiment, you can create triggers based on user intent:</p> <pre><code>## AccountBalanceInquiry\n### Triggers\n- When user wants to know their account balance\n### Steps\n- ...\n</code></pre> <p>This trigger activates when the user expresses a need for help or shows signs of confusion, providing assistance without explicit commands.</p>"},{"location":"tutorials/triggers-advanced/#communication-based-triggers","title":"Communication-Based Triggers","text":"<p>In multi-agent systems, triggers can respond to messages from other agents:</p> <pre><code>## StockUpdateNotification\n### Triggers\n- When you receive message from InventoryAgent asking for stock level\n### Steps\n- ...\n</code></pre> <p>This allows agents to communicate and react to information shared by other agents.</p>"},{"location":"tutorials/triggers-advanced/#error-handling-with-triggers","title":"Error Handling with Triggers","text":"<p>Triggers can implement robust error handling patterns:</p> <pre><code>## MissingPlaybook\n### Triggers\n- When no suitable playbook is available\n### Steps\n- Tell the user that an error occurred\n- ...\n</code></pre> <p>This creates a centralized error handling approach that can cover your entire application.</p>"},{"location":"tutorials/triggers-advanced/#combining-multiple-trigger-types","title":"Combining Multiple Trigger Types","text":"<p>For complex scenarios, you can combine multiple trigger types:</p> <pre><code>## SecurityAlert\n### Triggers\n- When user attempts more than 3 failed logins\n- When user attempts more than 3 failed credit card transactions\n### Steps\n- Log the security concern\n- ...\n</code></pre> <p>This pattern creates sophisticated security monitoring by evaluating multiple risk factors.</p>"},{"location":"tutorials/triggers-advanced/#best-practices-for-advanced-triggers","title":"Best Practices for Advanced Triggers","text":"<ul> <li>Prioritize user experience: Use triggers to make conversations feel natural and responsive</li> <li>Handle edge cases: Create specific triggers for error conditions and unusual scenarios</li> <li>Test thoroughly: Complex trigger systems need careful testing with various user inputs</li> <li>Document your trigger strategy: Make it clear which triggers exist and when they activate</li> </ul>"},{"location":"tutorials/triggers-advanced/#exercises","title":"Exercises","text":"<ol> <li>Implement a simple customer support agent who helps with order status and account renewal requests.</li> </ol>"},{"location":"tutorials/triggers-advanced/#next-steps","title":"Next Steps","text":"<p>Now that you understand advanced trigger patterns, you're ready to explore Multi-Agent Programming to create systems with multiple specialized agents. </p>"},{"location":"tutorials/user-interaction/","title":"User Interaction","text":"<p>In this tutorial, you'll learn how to create playbooks that interact with users, gather input, and respond dynamically.</p>"},{"location":"tutorials/user-interaction/#objective","title":"Objective","text":"<p>By the end of this tutorial, you'll understand:</p> <ul> <li>How to ask users for information</li> <li>How to store user responses in variables</li> <li>How to validate user input</li> <li>How to create conversational flows that adapt to user input</li> </ul>"},{"location":"tutorials/user-interaction/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completion of Adding Triggers</li> <li>Understanding of playbook structure and triggers</li> </ul>"},{"location":"tutorials/user-interaction/#basic-user-interaction","title":"Basic User Interaction","text":"<p>The most basic form of user interaction is asking a question and receiving a response. Let's create a simple example:</p> <pre><code># Personalized Greeting\nThis program greets the user by name\n\n## Greet\n### Triggers\n- At the beginning\n### Steps\n- Ask the user for their name\n- Say hello to the user by name and welcome them to Playbooks\n- End program\n</code></pre>"},{"location":"tutorials/user-interaction/#storing-user-responses-in-variables","title":"Storing User Responses in Variables","text":"<p>To create more complex interactions, you'll often need to store user responses in variables for later use:</p> <pre><code># Personal Information\nThis program collects and uses personal information.\n\n## Collect\n### Triggers\n- At the beginning\n### Steps\n- Ask the user for their $name\n- Ask the user for their favorite $color\n- Say hello to the user by $name and say that your will remember their favorite color is $color\n- End program\n</code></pre> <p>In this example:</p> <ul> <li><code>$name</code> stores the user's name</li> <li><code>$color</code> stores the user's favorite color</li> <li>These variables are then used in the response</li> </ul>"},{"location":"tutorials/user-interaction/#input-validation","title":"Input Validation","text":"<p>You can validate user input using natural language conditions:</p> <pre><code># PIN Validator\nThis program validates a user's PIN.\n\n## Main\n### Triggers\n- At the beginning\n### Steps\n- Ask the user to enter a 4-digit $pin\n- While $pin is not a 4-digit number\n  - Tell the user their PIN is invalid\n  - Ask the user to enter a 4-digit $pin again\n- Tell the user their PIN has been accepted\n- End program\n</code></pre> <p>This example:</p> <ul> <li>Asks for a PIN</li> <li>Checks if the PIN is a 4-digit number</li> <li>If not, it asks again until a valid PIN is provided</li> </ul>"},{"location":"tutorials/user-interaction/#handling-specific-responses","title":"Handling Specific Responses","text":"<p>You can create branching conversations based on user responses:</p> <pre><code># Food Preference\nThis program recommends restaurants based on food preferences.\n\n## Main\n### Triggers\n- At the beginning\n### Steps\n- Ask the user what type of food they're in the mood for\n- $preference = user's response\n- If $preference indicates Italian food\n  - Tell the user about some great Italian restaurants\n- If $preference indicates Mexican food\n  - Tell the user about some great Mexican restaurants\n- If $preference indicates Asian food\n  - Tell the user about some great Asian restaurants\n- Otherwise\n  - Tell the user you don't have recommendations for that type of food\n- End program\n</code></pre> <p>This example creates different responses based on the keywords in the user's input.</p>"},{"location":"tutorials/user-interaction/#advanced-validation-using-triggers","title":"Advanced Validation Using Triggers","text":"<p>For more sophisticated validation, you can use triggers to handle user input:</p> <pre><code># Account Access\nThis program validates user credentials.\n\n## Main\n### Triggers\n- At the beginning\n### Steps\n- Ask user for a $pin\n- Ask user for $email\n- Load user account\n- Tell the user their account balance\n\n## Validation($pin)\n### Triggers\n- When user provides a PIN\n### Steps\n- While $pin is not 4 digits\n  - Tell user $pin is not valid and ask for $pin again\n  - If the user gives up\n    - Apologize and end the conversation\n- Return $pin\n\n## EmailValidation($email)\n### Triggers\n- When user provides an email\n### Steps\n- While email is not a valid email or is a throwaway email\n  - Tell user email is not valid and ask for email again\n- Return email\n</code></pre> <p>In this example:</p> <ul> <li>The <code>Validation</code> playbook triggers when a user provides a PIN</li> <li>It validates that the PIN is 4 digits</li> <li>Similarly, the <code>EmailValidation</code> playbook validates email addresses</li> </ul>"},{"location":"tutorials/user-interaction/#creating-a-practical-example","title":"Creating a Practical Example","text":"<p>Let's put everything together in a practical example that collects user information:</p> <ol> <li>Create a new file named <code>user-form.md</code> with the following content:</li> </ol> <pre><code># User Registration\nThis program collects registration information from users.\n\n## Main\n### Triggers\n- At the beginning\n### Steps\n- Welcome the user to the registration process\n- Ask the user for their $name\n- Ask the user for their $email\n- Ask the user to create a $password\n- Ask the user for their $age\n- Tell the user: \"Thank you, $name! Your registration is complete.\"\n- Provide a summary of the collected information (excluding the password)\n- End program\n\n## EmailValidation\n### Triggers\n- When user provides an email address\n### Steps\n- While $email does not contain \"@\" and \".\"\n  - Tell the user their email is invalid\n  - Ask the user to provide a valid $email address\n- Return $email\n\n## PasswordValidation\n### Triggers\n- When user creates a password\n### Steps\n- While length of $password &lt; 8\n  - Tell the user their password is too short\n  - Ask the user to create a stronger password with at least 8 characters\n  - $password = user's response\n- Return $password\n\n## AgeValidation($age)\n### Triggers\n- When user provides their age\n### Steps\n- While $age &lt; 18 or $age &gt; 120\n  - If $age &lt; 18\n    - Tell the user they must be 18 or older to register\n  - If $age &gt; 120\n    - Tell the user the provided age seems incorrect\n  - Ask the user to provide their correct $age\n- Return $age\n</code></pre> <ol> <li>Run your playbook:</li> </ol> <pre><code>python -m playbooks.applications.agent_chat user-form.md --verbose\n</code></pre> <p>When you run this program, you'll experience:</p> <ul> <li>A guided registration process</li> <li>Different validation rules for each field</li> <li>Trigger-based validation that runs automatically when the user provides input</li> </ul>"},{"location":"tutorials/user-interaction/#best-practices-for-user-interaction","title":"Best Practices for User Interaction","text":"<ul> <li>Be clear about what information you're requesting</li> <li>Provide helpful error messages when validation fails</li> <li>Use variables to personalize responses</li> <li>Break complex interactions into multiple steps</li> <li>Use triggers for validation to keep your main flow clean</li> <li>Always provide feedback so users know their input was received</li> </ul>"},{"location":"tutorials/user-interaction/#exercises","title":"Exercises","text":"<ol> <li>Create a playbook that plays a simple number guessing game</li> <li>Extend the registration form to collect additional information like address or phone number</li> <li>Create a playbook that adapts its responses based on the user's sentiment (detected from their responses)</li> </ol>"},{"location":"tutorials/user-interaction/#next-steps","title":"Next Steps","text":"<p>Now that you know how to interact with users, you're ready to learn about Calling Playbooks to create more modular programs. </p>"},{"location":"tutorials/working-with-artifacts/","title":"Working with Artifacts","text":"<p>In this tutorial, you'll learn how to create, store, and manage data using artifacts in Playbooks AI.</p> <p> Support for artifacts is under active development and is subject to change.</p>"},{"location":"tutorials/working-with-artifacts/#objective","title":"Objective","text":"<p>By the end of this tutorial, you'll understand:</p> <ul> <li>What artifacts are and why they're useful</li> <li>How to create and save artifacts</li> <li>How to load and use artifacts in playbooks</li> <li>How to share artifacts between agents</li> </ul>"},{"location":"tutorials/working-with-artifacts/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completion of Python Playbooks</li> <li>Understanding of variables and data manipulation</li> </ul>"},{"location":"tutorials/working-with-artifacts/#what-are-artifacts","title":"What Are Artifacts?","text":"<p>Artifacts in Playbooks AI are similar to variables, but their values are not included in LLM calls by default. This makes them suitable for storing large data objects. Artifacts need to be explicitly loaded for their content to be included in LLM calls.</p> <p>For now, artifacts support text content only. Support for other types of content, such as images, will be added in the future.</p> <p>Artifacts are useful for:</p> <ul> <li>Storing data that for use within a given session, such as results of a web search</li> <li>Sharing large amounts of data between playbooks or agents</li> <li>Storing created reports and documents</li> </ul> <p> Use artifacts to keep LLM token usage low.</p>"},{"location":"tutorials/working-with-artifacts/#creating-and-saving-artifacts","title":"Creating and Saving Artifacts","text":"<p>You can create artifacts using the <code>SaveArtifact</code> function:</p> <pre><code>## CreateReport\n### Steps\n- $report = SaveArtifact(\"sales_report.md\", 2-3 line summary of sales report, 10-20 page long sales report)\n- Tell the user that the sales report has been created\n- Share $report with the user\n</code></pre> <p>The <code>SaveArtifact</code> function takes three parameters:</p> <ol> <li><code>name</code>: A unique identifier for the artifact (often with a file extension)</li> <li><code>summary</code>: A brief summary of what the artifact contains</li> <li><code>content</code>: The actual content to store in the artifact (can be text, JSON, or other data)</li> </ol>"},{"location":"tutorials/working-with-artifacts/#loading-artifacts","title":"Loading Artifacts","text":"<p>You can load artifacts using the <code>LoadArtifact</code> function:</p> <pre><code>## ViewReport\n### Steps\n- $report = LoadArtifact(\"sales_report.md\")\n- Tell the user \"Here is the sales report: Artifact[sales_report.md]\"\n</code></pre> <p>The <code>LoadArtifact</code> function returns an artifact object.</p>"},{"location":"tutorials/working-with-artifacts/#artifact-references","title":"Artifact References","text":"<p>When you want to refer to an artifact without loading its entire content, you can use artifact references:</p> <pre><code>## ShareReport\n### Steps\n- Tell the user: \"Here is your report: Artifact[sales_report.md]\"\n</code></pre> <p>This will display a link or reference to the artifact in the user interface, allowing the user to access it directly.</p> <p>Alternatively, you can ask Playbooks to share an artifact object with the user:</p> <pre><code>- Share $report with the user\n</code></pre> <p>You can also ask Playbooks to share an artifact by name:</p> <pre><code>- Share sales_report.md with the user\n</code></pre>"},{"location":"tutorials/working-with-artifacts/#when-is-an-artifact-included-in-an-llm-call","title":"When is an artifact included in an LLM call?","text":""},{"location":"tutorials/working-with-artifacts/#when-a-new-artifact-is-created","title":"When a new artifact is created","text":"<p>When a new artifact is created, it is included in the subsequent LLM call.</p>"},{"location":"tutorials/working-with-artifacts/#when-an-artifact-is-loaded","title":"When an artifact is loaded","text":"<p>When an artifact is loaded using LoadArtifact, it is included in the subsequent LLM call.</p>"},{"location":"tutorials/working-with-artifacts/#using-artifacts-in-python-playbooks","title":"Using Artifacts in Python Playbooks","text":"<p>You can use SaveArtifact and LoadArtifact in Python playbooks.</p> <pre><code>```python\n@playbook\nasync def CompileReports(report_names: list[str]) -&gt; str:\n    compiled_report = []\n    for report_name in report_names:\n        report = await LoadArtifact(report_name)\n        compiled_report.append(report.content[:100])\n\n    compiled_report = \"\\n\".join(compiled_report)\n    await SaveArtifact(\"compiled_report.md\", \"Compiled Report\", compiled_report)\n    return \"Artifact[compiled_report.md]\"\n```\n</code></pre> <p>In this example, the <code>CompileReports</code> playbook loads the reports and saves the compiled report as an artifact. It then returns reference to the compiled report.</p>"},{"location":"tutorials/working-with-artifacts/#sharing-artifacts-between-agents","title":"Sharing Artifacts Between Agents","text":"<p> Sharing artifacts between agents is not yet supported.</p>"},{"location":"tutorials/working-with-artifacts/#best-practices-for-working-with-artifacts","title":"Best Practices for Working with Artifacts","text":"<ul> <li>Use meaningful names: Choose artifact names that describe their content</li> <li>Provide good descriptions: Include detailed descriptions to help Playbooks runtime select appropriate artifact</li> </ul>"},{"location":"tutorials/working-with-artifacts/#exercises","title":"Exercises","text":"<ol> <li>Write a RAG agent that stores intermediate search results as artifacts</li> </ol>"},{"location":"tutorials/working-with-artifacts/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've now completed the basic tutorials for Playbooks AI.</p> <p>To continue learning, explore these topics:</p> <ul> <li>Multi-Agent Systems</li> <li>Intermediate Representation</li> </ul>"}]}